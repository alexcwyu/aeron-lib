/* automatically generated by rust-bindgen 0.66.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const AERON_FILE_SEP: u8 = 47u8;
    pub const AERON_COMPILER_GCC: u32 = 1;
    pub const AERON_COMPILER_LLVM: u32 = 1;
    pub const AERON_CPU_X64: u32 = 1;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct basic_string {
            pub _address: u8,
        }
        pub type basic_string__Char_alloc_type = u8;
        pub type basic_string__Alloc_traits = u8;
        pub type basic_string_traits_type = u8;
        pub type basic_string_value_type = u8;
        pub type basic_string_allocator_type = u8;
        pub type basic_string_size_type = u8;
        pub type basic_string_difference_type = u8;
        pub type basic_string_reference = u8;
        pub type basic_string_const_reference = u8;
        pub type basic_string_pointer = u8;
        pub type basic_string_const_pointer = u8;
        pub type basic_string_iterator = u8;
        pub type basic_string_const_iterator = u8;
        pub type basic_string_const_reverse_iterator = u8;
        pub type basic_string_reverse_iterator = u8;
        pub type basic_string___const_iterator = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct basic_string__Alloc_hider {
            pub _address: u8,
        }
        pub const basic_string__S_local_capacity: root::std::basic_string__bindgen_ty_1 = 0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub union basic_string__bindgen_ty_2 {
            pub _bindgen_opaque_blob: u64,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct pair {
            pub _address: u8,
        }
        pub type pair_first_type = u8;
        pub type pair_second_type = u8;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct pair___zero_as_null_pointer_constant {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub struct exception {
            pub _bindgen_opaque_blob: u64,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                ::std::mem::size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                ::std::mem::align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_value_type = u8;
        pub type allocator_size_type = u64;
        pub type allocator_difference_type = u64;
        pub type allocator_pointer = u8;
        pub type allocator_const_pointer = u8;
        pub type allocator_reference = u8;
        pub type allocator_const_reference = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = u8;
        pub type allocator_propagate_on_container_move_assignment = u8;
        pub type allocator_is_always_equal = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct unordered_map {
            pub _address: u8,
        }
        pub type unordered_map__Hashtable = u8;
        pub type unordered_map_key_type = u8;
        pub type unordered_map_value_type = u8;
        pub type unordered_map_mapped_type = u8;
        pub type unordered_map_hasher = u8;
        pub type unordered_map_key_equal = u8;
        pub type unordered_map_allocator_type = u8;
        pub type unordered_map_pointer = u8;
        pub type unordered_map_const_pointer = u8;
        pub type unordered_map_reference = u8;
        pub type unordered_map_const_reference = u8;
        pub type unordered_map_iterator = u8;
        pub type unordered_map_const_iterator = u8;
        pub type unordered_map_local_iterator = u8;
        pub type unordered_map_const_local_iterator = u8;
        pub type unordered_map_size_type = u8;
        pub type unordered_map_difference_type = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct vector {
            pub _address: u8,
        }
        pub type vector__Base = u8;
        pub type vector__Tp_alloc_type = u8;
        pub type vector__Alloc_traits = u8;
        pub type vector_value_type = u8;
        pub type vector_pointer = u8;
        pub type vector_const_pointer = u8;
        pub type vector_reference = u8;
        pub type vector_const_reference = u8;
        pub type vector_iterator = u8;
        pub type vector_const_iterator = u8;
        pub type vector_const_reverse_iterator = u8;
        pub type vector_reverse_iterator = u8;
        pub type vector_size_type = u64;
        pub type vector_difference_type = u64;
        pub type vector_allocator_type = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct vector__Temporary_value {
            pub _address: u8,
        }
        #[repr(C)]
        #[repr(align(1))]
        #[derive(Copy, Clone)]
        pub union vector__Temporary_value__Storage {
            pub _bindgen_opaque_blob: u8,
        }
        pub type milli = u8;
        pub mod chrono {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct duration {
                pub _address: u8,
            }
            pub type duration___is_float = u8;
            pub type duration___divide = u8;
            pub type duration___is_harmonic = u8;
            pub type duration_rep = u8;
            pub type duration_period = u8;
        }
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub struct recursive_mutex {
            pub _bindgen_opaque_blob: [u64; 5usize],
        }
        pub type recursive_mutex_native_handle_type = u64;
        #[test]
        fn bindgen_test_layout_recursive_mutex() {
            assert_eq!(
                ::std::mem::size_of::<recursive_mutex>(),
                40usize,
                concat!("Size of: ", stringify!(recursive_mutex))
            );
            assert_eq!(
                ::std::mem::align_of::<recursive_mutex>(),
                8usize,
                concat!("Alignment of ", stringify!(recursive_mutex))
            );
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct function {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct default_delete {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct unique_ptr {
            pub _address: u8,
        }
        pub type unique_ptr__DeleterConstraint = u8;
        pub type unique_ptr_pointer = u8;
        pub type unique_ptr_element_type = u8;
        pub type unique_ptr_deleter_type = u8;
        pub type unique_ptr___safe_conversion_up = u8;
        pub type string = [u64; 4usize];
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct shared_ptr {
            pub _address: u8,
        }
        pub type shared_ptr__Constructible = u8;
        pub type shared_ptr__Assignable = u8;
        pub type shared_ptr_element_type = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct weak_ptr {
            pub _address: u8,
        }
        pub type weak_ptr__Constructible = u8;
        pub type weak_ptr__Assignable = u8;
        pub type array_value_type = u8;
        pub type array_pointer = u8;
        pub type array_const_pointer = u8;
        pub type array_reference = u8;
        pub type array_const_reference = u8;
        pub type array_iterator = u8;
        pub type array_const_iterator = u8;
        pub type array_size_type = u64;
        pub type array_difference_type = u64;
        pub type array_reverse_iterator = u8;
        pub type array_const_reverse_iterator = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct atomic {
            pub _address: u8,
        }
        pub type atomic_value_type = u8;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct deque {
            pub _address: u8,
        }
        pub type deque__Base = u8;
        pub type deque__Tp_alloc_type = u8;
        pub type deque__Alloc_traits = u8;
        pub type deque__Map_pointer = u8;
        pub type deque_value_type = u8;
        pub type deque_pointer = u8;
        pub type deque_const_pointer = u8;
        pub type deque_reference = u8;
        pub type deque_const_reference = u8;
        pub type deque_iterator = u8;
        pub type deque_const_iterator = u8;
        pub type deque_const_reverse_iterator = u8;
        pub type deque_reverse_iterator = u8;
        pub type deque_size_type = u64;
        pub type deque_difference_type = u64;
        pub type deque_allocator_type = u8;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub struct thread {
            pub _bindgen_opaque_blob: u64,
        }
        pub type thread_native_handle_type = u64;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub struct thread_id {
            pub _bindgen_opaque_blob: u64,
        }
        #[test]
        fn bindgen_test_layout_thread_id() {
            assert_eq!(
                ::std::mem::size_of::<thread_id>(),
                8usize,
                concat!("Size of: ", stringify!(thread_id))
            );
            assert_eq!(
                ::std::mem::align_of::<thread_id>(),
                8usize,
                concat!("Alignment of ", stringify!(thread_id))
            );
        }
        pub type thread___not_same = u8;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Copy, Clone)]
        pub struct thread__State {
            pub _bindgen_opaque_blob: u64,
        }
        #[test]
        fn bindgen_test_layout_thread__State() {
            assert_eq!(
                ::std::mem::size_of::<thread__State>(),
                8usize,
                concat!("Size of: ", stringify!(thread__State))
            );
            assert_eq!(
                ::std::mem::align_of::<thread__State>(),
                8usize,
                concat!("Alignment of ", stringify!(thread__State))
            );
        }
        pub type thread__State_ptr = u64;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct thread__State_impl {}
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct thread__Invoker {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct thread__Invoker___result {
            pub _address: u8,
        }
        pub type thread__Call_wrapper = u8;
        #[test]
        fn bindgen_test_layout_thread() {
            assert_eq!(
                ::std::mem::size_of::<thread>(),
                8usize,
                concat!("Size of: ", stringify!(thread))
            );
            assert_eq!(
                ::std::mem::align_of::<thread>(),
                8usize,
                concat!("Alignment of ", stringify!(thread))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6thread4joinEv"]
            pub fn thread_join(this: *mut root::std::thread);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6thread6detachEv"]
            pub fn thread_detach(this: *mut root::std::thread);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6thread20hardware_concurrencyEv"]
            pub fn thread_hardware_concurrency() -> ::std::os::raw::c_uint;
        }
        impl thread {
            #[inline]
            pub unsafe fn join(&mut self) {
                thread_join(self)
            }
            #[inline]
            pub unsafe fn detach(&mut self) {
                thread_detach(self)
            }
            #[inline]
            pub unsafe fn hardware_concurrency() -> ::std::os::raw::c_uint {
                thread_hardware_concurrency()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6thread6_StateD1Ev"]
            pub fn thread__State__State_destructor(this: *mut root::std::thread__State);
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type __off_t = ::std::os::raw::c_long;
    pub type off_t = root::__off_t;
    pub mod aeron {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod util {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type Iterator = [u8; 0usize];
            #[repr(C)]
            pub struct InvokeOnScopeExit {
                pub m_func: root::aeron::util::InvokeOnScopeExit_func_t,
            }
            pub type InvokeOnScopeExit_func_t = [u64; 4usize];
            #[test]
            fn bindgen_test_layout_InvokeOnScopeExit() {
                const UNINIT: ::std::mem::MaybeUninit<InvokeOnScopeExit> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<InvokeOnScopeExit>(),
                    32usize,
                    concat!("Size of: ", stringify!(InvokeOnScopeExit))
                );
                assert_eq!(
                    ::std::mem::align_of::<InvokeOnScopeExit>(),
                    8usize,
                    concat!("Alignment of ", stringify!(InvokeOnScopeExit))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_func) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(InvokeOnScopeExit),
                        "::",
                        stringify!(m_func)
                    )
                );
            }
            #[repr(C)]
            pub struct OnScopeExit {
                pub m_holder: u64,
            }
            #[repr(C)]
            pub struct OnScopeExit_FuncHolderBase__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            pub struct OnScopeExit_FuncHolderBase {
                pub vtable_: *const OnScopeExit_FuncHolderBase__bindgen_vtable,
            }
            #[test]
            fn bindgen_test_layout_OnScopeExit_FuncHolderBase() {
                assert_eq!(
                    ::std::mem::size_of::<OnScopeExit_FuncHolderBase>(),
                    8usize,
                    concat!("Size of: ", stringify!(OnScopeExit_FuncHolderBase))
                );
                assert_eq!(
                    ::std::mem::align_of::<OnScopeExit_FuncHolderBase>(),
                    8usize,
                    concat!("Alignment of ", stringify!(OnScopeExit_FuncHolderBase))
                );
            }
            #[repr(C)]
            pub struct OnScopeExit_FuncHolder<func_t> {
                pub _base: root::aeron::util::OnScopeExit_FuncHolderBase,
                pub f: func_t,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<func_t>>,
            }
            #[test]
            fn bindgen_test_layout_OnScopeExit() {
                const UNINIT: ::std::mem::MaybeUninit<OnScopeExit> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<OnScopeExit>(),
                    8usize,
                    concat!("Size of: ", stringify!(OnScopeExit))
                );
                assert_eq!(
                    ::std::mem::align_of::<OnScopeExit>(),
                    8usize,
                    concat!("Alignment of ", stringify!(OnScopeExit))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_holder) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(OnScopeExit),
                        "::",
                        stringify!(m_holder)
                    )
                );
            }
            #[repr(C)]
            pub struct CallbackGuard {
                pub m_isInCallback: *mut bool,
            }
            #[test]
            fn bindgen_test_layout_CallbackGuard() {
                const UNINIT: ::std::mem::MaybeUninit<CallbackGuard> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CallbackGuard>(),
                    8usize,
                    concat!("Size of: ", stringify!(CallbackGuard))
                );
                assert_eq!(
                    ::std::mem::align_of::<CallbackGuard>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CallbackGuard))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_isInCallback) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CallbackGuard),
                        "::",
                        stringify!(m_isInCallback)
                    )
                );
            }
            pub type index_t = ::std::os::raw::c_int;
            pub type exception_handler_t = [u64; 4usize];
            pub const ExceptionCategory_EXCEPTION_CATEGORY_FATAL:
                root::aeron::util::ExceptionCategory = 0;
            pub const ExceptionCategory_EXCEPTION_CATEGORY_ERROR:
                root::aeron::util::ExceptionCategory = 1;
            pub const ExceptionCategory_EXCEPTION_CATEGORY_WARN:
                root::aeron::util::ExceptionCategory = 2;
            pub type ExceptionCategory = ::std::os::raw::c_long;
            #[repr(C)]
            pub struct SourcedException {
                pub _base: root::std::exception,
                pub m_where: root::std::string,
                pub m_what: root::std::string,
                pub m_category: root::aeron::util::ExceptionCategory,
            }
            #[test]
            fn bindgen_test_layout_SourcedException() {
                const UNINIT: ::std::mem::MaybeUninit<SourcedException> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<SourcedException>(),
                    80usize,
                    concat!("Size of: ", stringify!(SourcedException))
                );
                assert_eq!(
                    ::std::mem::align_of::<SourcedException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(SourcedException))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_where) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SourcedException),
                        "::",
                        stringify!(m_where)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_what) as usize - ptr as usize },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SourcedException),
                        "::",
                        stringify!(m_what)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_category) as usize - ptr as usize },
                    72usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SourcedException),
                        "::",
                        stringify!(m_category)
                    )
                );
            }
            #[repr(C)]
            pub struct IOException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_IOException() {
                assert_eq!(
                    ::std::mem::size_of::<IOException>(),
                    80usize,
                    concat!("Size of: ", stringify!(IOException))
                );
                assert_eq!(
                    ::std::mem::align_of::<IOException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IOException))
                );
            }
            #[repr(C)]
            pub struct FormatException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_FormatException() {
                assert_eq!(
                    ::std::mem::size_of::<FormatException>(),
                    80usize,
                    concat!("Size of: ", stringify!(FormatException))
                );
                assert_eq!(
                    ::std::mem::align_of::<FormatException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(FormatException))
                );
            }
            #[repr(C)]
            pub struct OutOfBoundsException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_OutOfBoundsException() {
                assert_eq!(
                    ::std::mem::size_of::<OutOfBoundsException>(),
                    80usize,
                    concat!("Size of: ", stringify!(OutOfBoundsException))
                );
                assert_eq!(
                    ::std::mem::align_of::<OutOfBoundsException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(OutOfBoundsException))
                );
            }
            #[repr(C)]
            pub struct ParseException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_ParseException() {
                assert_eq!(
                    ::std::mem::size_of::<ParseException>(),
                    80usize,
                    concat!("Size of: ", stringify!(ParseException))
                );
                assert_eq!(
                    ::std::mem::align_of::<ParseException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ParseException))
                );
            }
            #[repr(C)]
            pub struct ElementNotFound {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_ElementNotFound() {
                assert_eq!(
                    ::std::mem::size_of::<ElementNotFound>(),
                    80usize,
                    concat!("Size of: ", stringify!(ElementNotFound))
                );
                assert_eq!(
                    ::std::mem::align_of::<ElementNotFound>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ElementNotFound))
                );
            }
            #[repr(C)]
            pub struct IllegalArgumentException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_IllegalArgumentException() {
                assert_eq!(
                    ::std::mem::size_of::<IllegalArgumentException>(),
                    80usize,
                    concat!("Size of: ", stringify!(IllegalArgumentException))
                );
                assert_eq!(
                    ::std::mem::align_of::<IllegalArgumentException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IllegalArgumentException))
                );
            }
            #[repr(C)]
            pub struct IllegalStateException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_IllegalStateException() {
                assert_eq!(
                    ::std::mem::size_of::<IllegalStateException>(),
                    80usize,
                    concat!("Size of: ", stringify!(IllegalStateException))
                );
                assert_eq!(
                    ::std::mem::align_of::<IllegalStateException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(IllegalStateException))
                );
            }
            #[repr(C)]
            pub struct DriverTimeoutException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_DriverTimeoutException() {
                assert_eq!(
                    ::std::mem::size_of::<DriverTimeoutException>(),
                    80usize,
                    concat!("Size of: ", stringify!(DriverTimeoutException))
                );
                assert_eq!(
                    ::std::mem::align_of::<DriverTimeoutException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(DriverTimeoutException))
                );
            }
            #[repr(C)]
            pub struct ConductorServiceTimeoutException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_ConductorServiceTimeoutException() {
                assert_eq!(
                    ::std::mem::size_of::<ConductorServiceTimeoutException>(),
                    80usize,
                    concat!("Size of: ", stringify!(ConductorServiceTimeoutException))
                );
                assert_eq!(
                    ::std::mem::align_of::<ConductorServiceTimeoutException>(),
                    8usize,
                    concat!(
                        "Alignment of ",
                        stringify!(ConductorServiceTimeoutException)
                    )
                );
            }
            #[repr(C)]
            pub struct ClientTimeoutException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_ClientTimeoutException() {
                assert_eq!(
                    ::std::mem::size_of::<ClientTimeoutException>(),
                    80usize,
                    concat!("Size of: ", stringify!(ClientTimeoutException))
                );
                assert_eq!(
                    ::std::mem::align_of::<ClientTimeoutException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ClientTimeoutException))
                );
            }
            #[repr(C)]
            pub struct AeronException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_AeronException() {
                assert_eq!(
                    ::std::mem::size_of::<AeronException>(),
                    80usize,
                    concat!("Size of: ", stringify!(AeronException))
                );
                assert_eq!(
                    ::std::mem::align_of::<AeronException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(AeronException))
                );
            }
            #[repr(C)]
            pub struct UnknownSubscriptionException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_UnknownSubscriptionException() {
                assert_eq!(
                    ::std::mem::size_of::<UnknownSubscriptionException>(),
                    80usize,
                    concat!("Size of: ", stringify!(UnknownSubscriptionException))
                );
                assert_eq!(
                    ::std::mem::align_of::<UnknownSubscriptionException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(UnknownSubscriptionException))
                );
            }
            #[repr(C)]
            pub struct ReentrantException {
                pub _base: root::aeron::util::SourcedException,
            }
            #[test]
            fn bindgen_test_layout_ReentrantException() {
                assert_eq!(
                    ::std::mem::size_of::<ReentrantException>(),
                    80usize,
                    concat!("Size of: ", stringify!(ReentrantException))
                );
                assert_eq!(
                    ::std::mem::align_of::<ReentrantException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ReentrantException))
                );
            }
            #[repr(C)]
            pub struct RegistrationException {
                pub _base: root::aeron::util::SourcedException,
                pub m_errorCode: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_RegistrationException() {
                const UNINIT: ::std::mem::MaybeUninit<RegistrationException> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<RegistrationException>(),
                    88usize,
                    concat!("Size of: ", stringify!(RegistrationException))
                );
                assert_eq!(
                    ::std::mem::align_of::<RegistrationException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RegistrationException))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                    80usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RegistrationException),
                        "::",
                        stringify!(m_errorCode)
                    )
                );
            }
            #[repr(C)]
            pub struct TimeoutException {
                pub _base: root::aeron::util::AeronException,
            }
            #[test]
            fn bindgen_test_layout_TimeoutException() {
                assert_eq!(
                    ::std::mem::size_of::<TimeoutException>(),
                    80usize,
                    concat!("Size of: ", stringify!(TimeoutException))
                );
                assert_eq!(
                    ::std::mem::align_of::<TimeoutException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(TimeoutException))
                );
            }
            #[repr(C)]
            pub struct ChannelEndpointException {
                pub _base: root::aeron::util::AeronException,
                pub m_statusIndicatorCounterId: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_ChannelEndpointException() {
                const UNINIT: ::std::mem::MaybeUninit<ChannelEndpointException> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<ChannelEndpointException>(),
                    88usize,
                    concat!("Size of: ", stringify!(ChannelEndpointException))
                );
                assert_eq!(
                    ::std::mem::align_of::<ChannelEndpointException>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ChannelEndpointException))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).m_statusIndicatorCounterId) as usize
                            - ptr as usize
                    },
                    80usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ChannelEndpointException),
                        "::",
                        stringify!(m_statusIndicatorCounterId)
                    )
                );
            }
            #[repr(C)]
            pub struct MemoryMappedFile {
                pub m_memory: *mut ::std::os::raw::c_uchar,
                pub m_memorySize: usize,
            }
            pub type MemoryMappedFile_ptr_t = [u64; 2usize];
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct MemoryMappedFile_FileHandle {
                pub handle: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_MemoryMappedFile_FileHandle() {
                const UNINIT: ::std::mem::MaybeUninit<MemoryMappedFile_FileHandle> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<MemoryMappedFile_FileHandle>(),
                    4usize,
                    concat!("Size of: ", stringify!(MemoryMappedFile_FileHandle))
                );
                assert_eq!(
                    ::std::mem::align_of::<MemoryMappedFile_FileHandle>(),
                    4usize,
                    concat!("Alignment of ", stringify!(MemoryMappedFile_FileHandle))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemoryMappedFile_FileHandle),
                        "::",
                        stringify!(handle)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile11m_page_sizeE"]
                pub static mut MemoryMappedFile_m_page_size: usize;
            }
            #[test]
            fn bindgen_test_layout_MemoryMappedFile() {
                const UNINIT: ::std::mem::MaybeUninit<MemoryMappedFile> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<MemoryMappedFile>(),
                    16usize,
                    concat!("Size of: ", stringify!(MemoryMappedFile))
                );
                assert_eq!(
                    ::std::mem::align_of::<MemoryMappedFile>(),
                    8usize,
                    concat!("Alignment of ", stringify!(MemoryMappedFile))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_memory) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemoryMappedFile),
                        "::",
                        stringify!(m_memory)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_memorySize) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MemoryMappedFile),
                        "::",
                        stringify!(m_memorySize)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile9createNewEPKclmb"]
                pub fn MemoryMappedFile_createNew(
                    filename: *const ::std::os::raw::c_char,
                    offset: root::off_t,
                    length: usize,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile11mapExistingEPKclmbb"]
                pub fn MemoryMappedFile_mapExisting(
                    filename: *const ::std::os::raw::c_char,
                    offset: root::off_t,
                    length: usize,
                    readOnly: bool,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile11mapExistingEPKcbb"]
                pub fn MemoryMappedFile_mapExisting1(
                    filename: *const ::std::os::raw::c_char,
                    readOnly: bool,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK5aeron4util16MemoryMappedFile12getMemoryPtrEv"]
                pub fn MemoryMappedFile_getMemoryPtr(
                    this: *const root::aeron::util::MemoryMappedFile,
                ) -> *mut ::std::os::raw::c_uchar;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNK5aeron4util16MemoryMappedFile13getMemorySizeEv"]
                pub fn MemoryMappedFile_getMemorySize(
                    this: *const root::aeron::util::MemoryMappedFile,
                ) -> usize;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile11getPageSizeEv"]
                pub fn MemoryMappedFile_getPageSize() -> usize;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFile11getFileSizeEPKc"]
                pub fn MemoryMappedFile_getFileSize(
                    filename: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron4util16MemoryMappedFileD1Ev"]
                pub fn MemoryMappedFile_MemoryMappedFile_destructor(
                    this: *mut root::aeron::util::MemoryMappedFile,
                );
            }
            impl MemoryMappedFile {
                #[inline]
                pub unsafe fn createNew(
                    filename: *const ::std::os::raw::c_char,
                    offset: root::off_t,
                    length: usize,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t {
                    MemoryMappedFile_createNew(filename, offset, length, preTouch)
                }
                #[inline]
                pub unsafe fn mapExisting(
                    filename: *const ::std::os::raw::c_char,
                    offset: root::off_t,
                    length: usize,
                    readOnly: bool,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t {
                    MemoryMappedFile_mapExisting(filename, offset, length, readOnly, preTouch)
                }
                #[inline]
                pub unsafe fn mapExisting1(
                    filename: *const ::std::os::raw::c_char,
                    readOnly: bool,
                    preTouch: bool,
                ) -> root::aeron::util::MemoryMappedFile_ptr_t {
                    MemoryMappedFile_mapExisting1(filename, readOnly, preTouch)
                }
                #[inline]
                pub unsafe fn getMemoryPtr(&self) -> *mut ::std::os::raw::c_uchar {
                    MemoryMappedFile_getMemoryPtr(self)
                }
                #[inline]
                pub unsafe fn getMemorySize(&self) -> usize {
                    MemoryMappedFile_getMemorySize(self)
                }
                #[inline]
                pub unsafe fn getPageSize() -> usize {
                    MemoryMappedFile_getPageSize()
                }
                #[inline]
                pub unsafe fn getFileSize(
                    filename: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_long {
                    MemoryMappedFile_getFileSize(filename)
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    MemoryMappedFile_MemoryMappedFile_destructor(self)
                }
            }
        }
        pub mod concurrent {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod atomic {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct AtomicBuffer {
                pub m_buffer: *mut ::std::os::raw::c_uchar,
                pub m_length: root::aeron::concurrent::AtomicBuffer_length_t,
            }
            pub type AtomicBuffer_length_t = ::std::os::raw::c_uint;
            #[test]
            fn bindgen_test_layout_AtomicBuffer() {
                const UNINIT: ::std::mem::MaybeUninit<AtomicBuffer> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<AtomicBuffer>(),
                    16usize,
                    concat!("Size of: ", stringify!(AtomicBuffer))
                );
                assert_eq!(
                    ::std::mem::align_of::<AtomicBuffer>(),
                    8usize,
                    concat!("Alignment of ", stringify!(AtomicBuffer))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicBuffer),
                        "::",
                        stringify!(m_buffer)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_length) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicBuffer),
                        "::",
                        stringify!(m_length)
                    )
                );
            }
            pub mod logbuffer {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub mod DataFrameHeader {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                    #[repr(C, packed(4))]
                    #[derive(Copy, Clone)]
                    pub struct DataFrameHeaderDefn {
                        pub frameLength: ::std::os::raw::c_int,
                        pub version: ::std::os::raw::c_uchar,
                        pub flags: ::std::os::raw::c_uchar,
                        pub type_: ::std::os::raw::c_ushort,
                        pub termOffset: ::std::os::raw::c_int,
                        pub sessionId: ::std::os::raw::c_int,
                        pub streamId: ::std::os::raw::c_int,
                        pub termId: ::std::os::raw::c_int,
                        pub reservedValue: ::std::os::raw::c_long,
                    }
                    #[test]
                    fn bindgen_test_layout_DataFrameHeaderDefn() {
                        const UNINIT: ::std::mem::MaybeUninit<DataFrameHeaderDefn> =
                            ::std::mem::MaybeUninit::uninit();
                        let ptr = UNINIT.as_ptr();
                        assert_eq!(
                            ::std::mem::size_of::<DataFrameHeaderDefn>(),
                            32usize,
                            concat!("Size of: ", stringify!(DataFrameHeaderDefn))
                        );
                        assert_eq!(
                            ::std::mem::align_of::<DataFrameHeaderDefn>(),
                            4usize,
                            concat!("Alignment of ", stringify!(DataFrameHeaderDefn))
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).frameLength) as usize - ptr as usize
                            },
                            0usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(frameLength)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
                            4usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(version)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
                            5usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(flags)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
                            6usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(type_)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).termOffset) as usize - ptr as usize
                            },
                            8usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(termOffset)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).sessionId) as usize - ptr as usize
                            },
                            12usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(sessionId)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize
                            },
                            16usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(streamId)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).termId) as usize - ptr as usize },
                            20usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(termId)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).reservedValue) as usize - ptr as usize
                            },
                            24usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(DataFrameHeaderDefn),
                                "::",
                                stringify!(reservedValue)
                            )
                        );
                    }
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct BufferClaim {
                    pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                }
                #[test]
                fn bindgen_test_layout_BufferClaim() {
                    const UNINIT: ::std::mem::MaybeUninit<BufferClaim> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<BufferClaim>(),
                        16usize,
                        concat!("Size of: ", stringify!(BufferClaim))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<BufferClaim>(),
                        8usize,
                        concat!("Alignment of ", stringify!(BufferClaim))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BufferClaim),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                }
                pub mod FrameDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct HeaderWriter {
                    pub m_sessionId: ::std::os::raw::c_int,
                    pub m_streamId: ::std::os::raw::c_int,
                }
                #[test]
                fn bindgen_test_layout_HeaderWriter() {
                    const UNINIT: ::std::mem::MaybeUninit<HeaderWriter> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<HeaderWriter>(),
                        8usize,
                        concat!("Size of: ", stringify!(HeaderWriter))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<HeaderWriter>(),
                        4usize,
                        concat!("Alignment of ", stringify!(HeaderWriter))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(HeaderWriter),
                            "::",
                            stringify!(m_sessionId)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                        4usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(HeaderWriter),
                            "::",
                            stringify!(m_streamId)
                        )
                    );
                }
                pub mod LogBufferDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                    #[repr(C, packed(4))]
                    #[derive(Copy, Clone)]
                    pub struct LogMetaDataDefn {
                        pub termTailCounters: [::std::os::raw::c_long; 3usize],
                        pub activeTermCount: ::std::os::raw::c_int,
                        pub pad1: [::std::os::raw::c_schar; 100usize],
                        pub endOfStreamPosition: ::std::os::raw::c_long,
                        pub isConnected: ::std::os::raw::c_int,
                        pub activeTransportCount: ::std::os::raw::c_int,
                        pub pad2: [::std::os::raw::c_schar; 112usize],
                        pub correlationId: ::std::os::raw::c_long,
                        pub initialTermId: ::std::os::raw::c_int,
                        pub defaultFrameHeaderLength: ::std::os::raw::c_int,
                        pub mtuLength: ::std::os::raw::c_int,
                        pub termLength: ::std::os::raw::c_int,
                        pub pageSize: ::std::os::raw::c_int,
                        pub pad3: [::std::os::raw::c_schar; 36usize],
                    }
                    #[test]
                    fn bindgen_test_layout_LogMetaDataDefn() {
                        const UNINIT: ::std::mem::MaybeUninit<LogMetaDataDefn> =
                            ::std::mem::MaybeUninit::uninit();
                        let ptr = UNINIT.as_ptr();
                        assert_eq!(
                            ::std::mem::size_of::<LogMetaDataDefn>(),
                            320usize,
                            concat!("Size of: ", stringify!(LogMetaDataDefn))
                        );
                        assert_eq!(
                            ::std::mem::align_of::<LogMetaDataDefn>(),
                            4usize,
                            concat!("Alignment of ", stringify!(LogMetaDataDefn))
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).termTailCounters) as usize
                                    - ptr as usize
                            },
                            0usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(termTailCounters)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).activeTermCount) as usize - ptr as usize
                            },
                            24usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(activeTermCount)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
                            28usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(pad1)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).endOfStreamPosition) as usize
                                    - ptr as usize
                            },
                            128usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(endOfStreamPosition)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).isConnected) as usize - ptr as usize
                            },
                            136usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(isConnected)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).activeTransportCount) as usize
                                    - ptr as usize
                            },
                            140usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(activeTransportCount)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
                            144usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(pad2)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize
                            },
                            256usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(correlationId)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).initialTermId) as usize - ptr as usize
                            },
                            264usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(initialTermId)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).defaultFrameHeaderLength) as usize
                                    - ptr as usize
                            },
                            268usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(defaultFrameHeaderLength)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).mtuLength) as usize - ptr as usize
                            },
                            272usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(mtuLength)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).termLength) as usize - ptr as usize
                            },
                            276usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(termLength)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).pageSize) as usize - ptr as usize
                            },
                            280usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(pageSize)
                            )
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
                            284usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(LogMetaDataDefn),
                                "::",
                                stringify!(pad3)
                            )
                        );
                    }
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct Header {
                    pub m_context: *mut ::std::os::raw::c_void,
                    pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                    pub m_offset: root::aeron::util::index_t,
                    pub m_initialTermId: ::std::os::raw::c_int,
                    pub m_positionBitsToShift: ::std::os::raw::c_int,
                }
                #[test]
                fn bindgen_test_layout_Header() {
                    const UNINIT: ::std::mem::MaybeUninit<Header> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<Header>(),
                        40usize,
                        concat!("Size of: ", stringify!(Header))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<Header>(),
                        8usize,
                        concat!("Alignment of ", stringify!(Header))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_context) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Header),
                            "::",
                            stringify!(m_context)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Header),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_offset) as usize - ptr as usize },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Header),
                            "::",
                            stringify!(m_offset)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_initialTermId) as usize - ptr as usize
                        },
                        28usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Header),
                            "::",
                            stringify!(m_initialTermId)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_positionBitsToShift) as usize
                                - ptr as usize
                        },
                        32usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(Header),
                            "::",
                            stringify!(m_positionBitsToShift)
                        )
                    );
                }
                pub type fragment_handler_t = u8;
                pub mod TermReader {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                    #[repr(C)]
                    #[derive(Copy, Clone)]
                    pub struct ReadOutcome {
                        pub offset: ::std::os::raw::c_int,
                        pub fragmentsRead: ::std::os::raw::c_int,
                    }
                    #[test]
                    fn bindgen_test_layout_ReadOutcome() {
                        const UNINIT: ::std::mem::MaybeUninit<ReadOutcome> =
                            ::std::mem::MaybeUninit::uninit();
                        let ptr = UNINIT.as_ptr();
                        assert_eq!(
                            ::std::mem::size_of::<ReadOutcome>(),
                            8usize,
                            concat!("Size of: ", stringify!(ReadOutcome))
                        );
                        assert_eq!(
                            ::std::mem::align_of::<ReadOutcome>(),
                            4usize,
                            concat!("Alignment of ", stringify!(ReadOutcome))
                        );
                        assert_eq!(
                            unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
                            0usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(ReadOutcome),
                                "::",
                                stringify!(offset)
                            )
                        );
                        assert_eq!(
                            unsafe {
                                ::std::ptr::addr_of!((*ptr).fragmentsRead) as usize - ptr as usize
                            },
                            4usize,
                            concat!(
                                "Offset of field: ",
                                stringify!(ReadOutcome),
                                "::",
                                stringify!(fragmentsRead)
                            )
                        );
                    }
                }
                pub type block_handler_t = u8;
                pub mod TermBlockScanner {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
            }
            pub type on_counters_metadata_t = u8;
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct CountersReader {
                pub m_metadataBuffer: root::aeron::concurrent::AtomicBuffer,
                pub m_valuesBuffer: root::aeron::concurrent::AtomicBuffer,
                pub m_maxCounterId: ::std::os::raw::c_int,
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct CountersReader_CounterValueDefn {
                pub counterValue: ::std::os::raw::c_long,
                pub registrationId: ::std::os::raw::c_long,
                pub ownerId: ::std::os::raw::c_long,
                pub padding: [::std::os::raw::c_schar; 104usize],
            }
            #[test]
            fn bindgen_test_layout_CountersReader_CounterValueDefn() {
                const UNINIT: ::std::mem::MaybeUninit<CountersReader_CounterValueDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CountersReader_CounterValueDefn>(),
                    128usize,
                    concat!("Size of: ", stringify!(CountersReader_CounterValueDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<CountersReader_CounterValueDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(CountersReader_CounterValueDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).counterValue) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterValueDefn),
                        "::",
                        stringify!(counterValue)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).registrationId) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterValueDefn),
                        "::",
                        stringify!(registrationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).ownerId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterValueDefn),
                        "::",
                        stringify!(ownerId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterValueDefn),
                        "::",
                        stringify!(padding)
                    )
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct CountersReader_CounterMetaDataDefn {
                pub state: ::std::os::raw::c_int,
                pub typeId: ::std::os::raw::c_int,
                pub freeToReuseDeadline: ::std::os::raw::c_long,
                pub key: [::std::os::raw::c_schar; 112usize],
                pub labelLength: ::std::os::raw::c_int,
                pub label: [::std::os::raw::c_schar; 380usize],
            }
            #[test]
            fn bindgen_test_layout_CountersReader_CounterMetaDataDefn() {
                const UNINIT: ::std::mem::MaybeUninit<CountersReader_CounterMetaDataDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CountersReader_CounterMetaDataDefn>(),
                    512usize,
                    concat!("Size of: ", stringify!(CountersReader_CounterMetaDataDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<CountersReader_CounterMetaDataDefn>(),
                    4usize,
                    concat!(
                        "Alignment of ",
                        stringify!(CountersReader_CounterMetaDataDefn)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(state)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).typeId) as usize - ptr as usize },
                    4usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(typeId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).freeToReuseDeadline) as usize - ptr as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(freeToReuseDeadline)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(key)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).labelLength) as usize - ptr as usize },
                    128usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(labelLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
                    132usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader_CounterMetaDataDefn),
                        "::",
                        stringify!(label)
                    )
                );
            }
            pub const CountersReader_NULL_COUNTER_ID: ::std::os::raw::c_int = -1;
            pub const CountersReader_RECORD_UNUSED: ::std::os::raw::c_int = 0;
            pub const CountersReader_RECORD_ALLOCATED: ::std::os::raw::c_int = 1;
            pub const CountersReader_RECORD_RECLAIMED: ::std::os::raw::c_int = -1;
            pub const CountersReader_DEFAULT_REGISTRATION_ID: ::std::os::raw::c_long = 0;
            pub const CountersReader_DEFAULT_OWNER_ID: ::std::os::raw::c_long = 0;
            pub const CountersReader_NOT_FREE_TO_REUSE: ::std::os::raw::c_long =
                9223372036854775807;
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader14COUNTER_LENGTHE"]
                pub static CountersReader_COUNTER_LENGTH: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader22REGISTRATION_ID_OFFSETE"]
                pub static CountersReader_REGISTRATION_ID_OFFSET: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader15OWNER_ID_OFFSETE"]
                pub static CountersReader_OWNER_ID_OFFSET: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader15METADATA_LENGTHE"]
                pub static CountersReader_METADATA_LENGTH: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader14TYPE_ID_OFFSETE"]
                pub static CountersReader_TYPE_ID_OFFSET: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader30FREE_FOR_REUSE_DEADLINE_OFFSETE"]
                pub static CountersReader_FREE_FOR_REUSE_DEADLINE_OFFSET:
                    root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader10KEY_OFFSETE"]
                pub static CountersReader_KEY_OFFSET: root::aeron::util::index_t;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN5aeron10concurrent14CountersReader19LABEL_LENGTH_OFFSETE"]
                pub static CountersReader_LABEL_LENGTH_OFFSET: root::aeron::util::index_t;
            }
            pub const CountersReader_MAX_LABEL_LENGTH: ::std::os::raw::c_int = 380;
            pub const CountersReader_MAX_KEY_LENGTH: ::std::os::raw::c_int = 112;
            #[test]
            fn bindgen_test_layout_CountersReader() {
                const UNINIT: ::std::mem::MaybeUninit<CountersReader> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CountersReader>(),
                    40usize,
                    concat!("Size of: ", stringify!(CountersReader))
                );
                assert_eq!(
                    ::std::mem::align_of::<CountersReader>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CountersReader))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).m_metadataBuffer) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader),
                        "::",
                        stringify!(m_metadataBuffer)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_valuesBuffer) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader),
                        "::",
                        stringify!(m_valuesBuffer)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_maxCounterId) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersReader),
                        "::",
                        stringify!(m_maxCounterId)
                    )
                );
            }
            #[repr(C)]
            pub struct CountersManager {
                pub _base: root::aeron::concurrent::CountersReader,
                pub m_freeList: [u64; 10usize],
                pub m_clock: root::aeron::concurrent::CountersManager_clock_t,
                pub m_freeToReuseTimeoutMs: ::std::os::raw::c_long,
                pub m_highWaterMark: root::aeron::util::index_t,
            }
            pub type CountersManager_clock_t = [u64; 4usize];
            #[test]
            fn bindgen_test_layout_CountersManager() {
                const UNINIT: ::std::mem::MaybeUninit<CountersManager> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CountersManager>(),
                    168usize,
                    concat!("Size of: ", stringify!(CountersManager))
                );
                assert_eq!(
                    ::std::mem::align_of::<CountersManager>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CountersManager))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_freeList) as usize - ptr as usize },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersManager),
                        "::",
                        stringify!(m_freeList)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_clock) as usize - ptr as usize },
                    120usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersManager),
                        "::",
                        stringify!(m_clock)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).m_freeToReuseTimeoutMs) as usize - ptr as usize
                    },
                    152usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersManager),
                        "::",
                        stringify!(m_freeToReuseTimeoutMs)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_highWaterMark) as usize - ptr as usize },
                    160usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CountersManager),
                        "::",
                        stringify!(m_highWaterMark)
                    )
                );
            }
            pub mod status {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct ReadablePosition<X> {
                    pub m_impl: X,
                    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<X>>,
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct Position<X> {
                    pub _base: root::aeron::concurrent::status::ReadablePosition<X>,
                    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<X>>,
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct UnsafeBufferPosition {
                    pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                    pub m_id: ::std::os::raw::c_int,
                    pub m_offset: ::std::os::raw::c_int,
                }
                #[test]
                fn bindgen_test_layout_UnsafeBufferPosition() {
                    const UNINIT: ::std::mem::MaybeUninit<UnsafeBufferPosition> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<UnsafeBufferPosition>(),
                        24usize,
                        concat!("Size of: ", stringify!(UnsafeBufferPosition))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<UnsafeBufferPosition>(),
                        8usize,
                        concat!("Alignment of ", stringify!(UnsafeBufferPosition))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(UnsafeBufferPosition),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_id) as usize - ptr as usize },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(UnsafeBufferPosition),
                            "::",
                            stringify!(m_id)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_offset) as usize - ptr as usize },
                        20usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(UnsafeBufferPosition),
                            "::",
                            stringify!(m_offset)
                        )
                    );
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct StatusIndicatorReader {
                    pub m_staticBuffer: [u8; 8usize],
                    pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                    pub m_id: ::std::os::raw::c_int,
                    pub m_offset: ::std::os::raw::c_int,
                }
                #[test]
                fn bindgen_test_layout_StatusIndicatorReader() {
                    const UNINIT: ::std::mem::MaybeUninit<StatusIndicatorReader> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<StatusIndicatorReader>(),
                        32usize,
                        concat!("Size of: ", stringify!(StatusIndicatorReader))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<StatusIndicatorReader>(),
                        8usize,
                        concat!("Alignment of ", stringify!(StatusIndicatorReader))
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_staticBuffer) as usize - ptr as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatusIndicatorReader),
                            "::",
                            stringify!(m_staticBuffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatusIndicatorReader),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_id) as usize - ptr as usize },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatusIndicatorReader),
                            "::",
                            stringify!(m_id)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_offset) as usize - ptr as usize },
                        28usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(StatusIndicatorReader),
                            "::",
                            stringify!(m_offset)
                        )
                    );
                }
            }
            #[repr(C)]
            pub struct AtomicArrayUpdater<E> {
                pub m_beginChange: u64,
                pub m_array: *mut E,
                pub m_length: usize,
                pub m_endChange: u64,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<E>>,
            }
            #[repr(C)]
            pub struct AtomicCounter {
                pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                pub m_counterId: ::std::os::raw::c_int,
                pub m_countersManager: [u64; 2usize],
                pub m_offset: root::aeron::util::index_t,
            }
            #[test]
            fn bindgen_test_layout_AtomicCounter() {
                const UNINIT: ::std::mem::MaybeUninit<AtomicCounter> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<AtomicCounter>(),
                    48usize,
                    concat!("Size of: ", stringify!(AtomicCounter))
                );
                assert_eq!(
                    ::std::mem::align_of::<AtomicCounter>(),
                    8usize,
                    concat!("Alignment of ", stringify!(AtomicCounter))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicCounter),
                        "::",
                        stringify!(m_buffer)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_counterId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicCounter),
                        "::",
                        stringify!(m_counterId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).m_countersManager) as usize - ptr as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicCounter),
                        "::",
                        stringify!(m_countersManager)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_offset) as usize - ptr as usize },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(AtomicCounter),
                        "::",
                        stringify!(m_offset)
                    )
                );
            }
            pub mod ringbuffer {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub type handler_t = [u64; 4usize];
                pub mod RingBufferDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
                pub mod RecordDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
                #[repr(C)]
                #[derive(Copy, Clone)]
                pub struct ManyToOneRingBuffer {
                    pub m_buffer: *mut root::aeron::concurrent::AtomicBuffer,
                    pub m_capacity: root::aeron::util::index_t,
                    pub m_maxMsgLength: root::aeron::util::index_t,
                    pub m_headPositionIndex: root::aeron::util::index_t,
                    pub m_headCachePositionIndex: root::aeron::util::index_t,
                    pub m_tailPositionIndex: root::aeron::util::index_t,
                    pub m_correlationIdCounterIndex: root::aeron::util::index_t,
                    pub m_consumerHeartbeatIndex: root::aeron::util::index_t,
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN5aeron10concurrent10ringbuffer19ManyToOneRingBuffer21INSUFFICIENT_CAPACITYE"]
                    pub static ManyToOneRingBuffer_INSUFFICIENT_CAPACITY:
                        root::aeron::util::index_t;
                }
                #[test]
                fn bindgen_test_layout_ManyToOneRingBuffer() {
                    const UNINIT: ::std::mem::MaybeUninit<ManyToOneRingBuffer> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<ManyToOneRingBuffer>(),
                        40usize,
                        concat!("Size of: ", stringify!(ManyToOneRingBuffer))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<ManyToOneRingBuffer>(),
                        8usize,
                        concat!("Alignment of ", stringify!(ManyToOneRingBuffer))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_capacity) as usize - ptr as usize },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_capacity)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_maxMsgLength) as usize - ptr as usize
                        },
                        12usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_maxMsgLength)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_headPositionIndex) as usize - ptr as usize
                        },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_headPositionIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_headCachePositionIndex) as usize
                                - ptr as usize
                        },
                        20usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_headCachePositionIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_tailPositionIndex) as usize - ptr as usize
                        },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_tailPositionIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_correlationIdCounterIndex) as usize
                                - ptr as usize
                        },
                        28usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_correlationIdCounterIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_consumerHeartbeatIndex) as usize
                                - ptr as usize
                        },
                        32usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(ManyToOneRingBuffer),
                            "::",
                            stringify!(m_consumerHeartbeatIndex)
                        )
                    );
                }
            }
            #[repr(C)]
            pub struct AgentRunner<Agent, IdleStrategy> {
                pub m_agent: *mut Agent,
                pub m_idleStrategy: *mut IdleStrategy,
                pub m_exceptionHandler: *mut root::aeron::util::exception_handler_t,
                pub m_isStarted: u8,
                pub m_isRunning: u8,
                pub m_isClosed: u8,
                pub m_thread: root::std::thread,
                pub m_name: root::std::string,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Agent>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<IdleStrategy>>,
            }
            pub mod broadcast {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub mod BroadcastBufferDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
                pub mod RecordDescriptor {
                    #[allow(unused_imports)]
                    use self::super::super::super::super::super::root;
                }
                #[repr(C)]
                pub struct BroadcastReceiver {
                    pub m_buffer: *mut root::aeron::concurrent::AtomicBuffer,
                    pub m_capacity: root::aeron::util::index_t,
                    pub m_mask: root::aeron::util::index_t,
                    pub m_tailIntentCounterIndex: root::aeron::util::index_t,
                    pub m_tailCounterIndex: root::aeron::util::index_t,
                    pub m_latestCounterIndex: root::aeron::util::index_t,
                    pub m_recordOffset: root::aeron::util::index_t,
                    pub m_cursor: ::std::os::raw::c_long,
                    pub m_nextRecord: ::std::os::raw::c_long,
                    pub m_lappedCount: u64,
                }
                #[test]
                fn bindgen_test_layout_BroadcastReceiver() {
                    const UNINIT: ::std::mem::MaybeUninit<BroadcastReceiver> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<BroadcastReceiver>(),
                        56usize,
                        concat!("Size of: ", stringify!(BroadcastReceiver))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<BroadcastReceiver>(),
                        8usize,
                        concat!("Alignment of ", stringify!(BroadcastReceiver))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_buffer) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_buffer)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_capacity) as usize - ptr as usize },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_capacity)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_mask) as usize - ptr as usize },
                        12usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_mask)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_tailIntentCounterIndex) as usize
                                - ptr as usize
                        },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_tailIntentCounterIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_tailCounterIndex) as usize - ptr as usize
                        },
                        20usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_tailCounterIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_latestCounterIndex) as usize
                                - ptr as usize
                        },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_latestCounterIndex)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_recordOffset) as usize - ptr as usize
                        },
                        28usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_recordOffset)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_cursor) as usize - ptr as usize },
                        32usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_cursor)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_nextRecord) as usize - ptr as usize
                        },
                        40usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_nextRecord)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_lappedCount) as usize - ptr as usize
                        },
                        48usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(BroadcastReceiver),
                            "::",
                            stringify!(m_lappedCount)
                        )
                    );
                }
                pub type scratch_buffer_t = [u8; 4096usize];
                pub type handler_t = [u64; 4usize];
                #[repr(C)]
                #[repr(align(16))]
                pub struct CopyBroadcastReceiver {
                    pub m_scratch: root::aeron::concurrent::broadcast::scratch_buffer_t,
                    pub m_receiver: *mut root::aeron::concurrent::broadcast::BroadcastReceiver,
                    pub m_scratchBuffer: root::aeron::concurrent::AtomicBuffer,
                }
                #[test]
                fn bindgen_test_layout_CopyBroadcastReceiver() {
                    const UNINIT: ::std::mem::MaybeUninit<CopyBroadcastReceiver> =
                        ::std::mem::MaybeUninit::uninit();
                    let ptr = UNINIT.as_ptr();
                    assert_eq!(
                        ::std::mem::size_of::<CopyBroadcastReceiver>(),
                        4128usize,
                        concat!("Size of: ", stringify!(CopyBroadcastReceiver))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<CopyBroadcastReceiver>(),
                        16usize,
                        concat!("Alignment of ", stringify!(CopyBroadcastReceiver))
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_scratch) as usize - ptr as usize },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(CopyBroadcastReceiver),
                            "::",
                            stringify!(m_scratch)
                        )
                    );
                    assert_eq!(
                        unsafe { ::std::ptr::addr_of!((*ptr).m_receiver) as usize - ptr as usize },
                        4096usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(CopyBroadcastReceiver),
                            "::",
                            stringify!(m_receiver)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            ::std::ptr::addr_of!((*ptr).m_scratchBuffer) as usize - ptr as usize
                        },
                        4104usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(CopyBroadcastReceiver),
                            "::",
                            stringify!(m_scratchBuffer)
                        )
                    );
                }
            }
            #[repr(C)]
            pub struct SleepingIdleStrategy {
                pub m_duration: u64,
            }
            #[test]
            fn bindgen_test_layout_SleepingIdleStrategy() {
                const UNINIT: ::std::mem::MaybeUninit<SleepingIdleStrategy> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<SleepingIdleStrategy>(),
                    8usize,
                    concat!("Size of: ", stringify!(SleepingIdleStrategy))
                );
                assert_eq!(
                    ::std::mem::align_of::<SleepingIdleStrategy>(),
                    8usize,
                    concat!("Alignment of ", stringify!(SleepingIdleStrategy))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_duration) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SleepingIdleStrategy),
                        "::",
                        stringify!(m_duration)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct AgentInvoker<Agent> {
                pub m_agent: *mut Agent,
                pub m_exceptionHandler: *mut root::aeron::util::exception_handler_t,
                pub m_isStarted: bool,
                pub m_isRunning: bool,
                pub m_isClosed: bool,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Agent>>,
            }
        }
        #[repr(C)]
        pub struct LogBuffers {
            pub m_memoryMappedFiles: root::aeron::util::MemoryMappedFile_ptr_t,
            pub m_buffers: [root::aeron::concurrent::AtomicBuffer; 4usize],
        }
        #[test]
        fn bindgen_test_layout_LogBuffers() {
            const UNINIT: ::std::mem::MaybeUninit<LogBuffers> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<LogBuffers>(),
                80usize,
                concat!("Size of: ", stringify!(LogBuffers))
            );
            assert_eq!(
                ::std::mem::align_of::<LogBuffers>(),
                8usize,
                concat!("Alignment of ", stringify!(LogBuffers))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_memoryMappedFiles) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogBuffers),
                    "::",
                    stringify!(m_memoryMappedFiles)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_buffers) as usize - ptr as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogBuffers),
                    "::",
                    stringify!(m_buffers)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron10LogBuffersC1EPKcb"]
            pub fn LogBuffers_LogBuffers(
                this: *mut root::aeron::LogBuffers,
                filename: *const ::std::os::raw::c_char,
                preTouch: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron10LogBuffersC1EPhli"]
            pub fn LogBuffers_LogBuffers1(
                this: *mut root::aeron::LogBuffers,
                address: *mut ::std::os::raw::c_uchar,
                logLength: ::std::os::raw::c_long,
                termLength: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron10LogBuffersD1Ev"]
            pub fn LogBuffers_LogBuffers_destructor(this: *mut root::aeron::LogBuffers);
        }
        impl LogBuffers {
            #[inline]
            pub unsafe fn new(filename: *const ::std::os::raw::c_char, preTouch: bool) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                LogBuffers_LogBuffers(__bindgen_tmp.as_mut_ptr(), filename, preTouch);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                address: *mut ::std::os::raw::c_uchar,
                logLength: ::std::os::raw::c_long,
                termLength: ::std::os::raw::c_int,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                LogBuffers_LogBuffers1(__bindgen_tmp.as_mut_ptr(), address, logLength, termLength);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                LogBuffers_LogBuffers_destructor(self)
            }
        }
        pub type on_reserved_value_supplier_t = [u64; 4usize];
        #[repr(C)]
        pub struct Publication {
            pub m_conductor: *mut root::aeron::ClientConductor,
            pub m_logMetaDataBuffer: *mut root::aeron::concurrent::AtomicBuffer,
            pub m_channel: root::std::string,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_originalRegistrationId: ::std::os::raw::c_long,
            pub m_maxPossiblePosition: ::std::os::raw::c_long,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_sessionId: ::std::os::raw::c_int,
            pub m_initialTermId: ::std::os::raw::c_int,
            pub m_maxPayloadLength: ::std::os::raw::c_int,
            pub m_maxMessageLength: ::std::os::raw::c_int,
            pub m_positionBitsToShift: ::std::os::raw::c_int,
            pub m_publicationLimit: root::aeron::concurrent::status::ReadablePosition<
                root::aeron::concurrent::status::UnsafeBufferPosition,
            >,
            pub m_channelStatusId: ::std::os::raw::c_int,
            pub m_isClosed: u8,
            pub m_logBuffers: [u64; 2usize],
            pub m_headerWriter: root::aeron::concurrent::logbuffer::HeaderWriter,
        }
        #[test]
        fn bindgen_test_layout_Publication() {
            const UNINIT: ::std::mem::MaybeUninit<Publication> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Publication>(),
                152usize,
                concat!("Size of: ", stringify!(Publication))
            );
            assert_eq!(
                ::std::mem::align_of::<Publication>(),
                8usize,
                concat!("Alignment of ", stringify!(Publication))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductor) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_conductor)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logMetaDataBuffer) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_logMetaDataBuffer)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_originalRegistrationId) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_originalRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_maxPossiblePosition) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_maxPossiblePosition)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_sessionId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_initialTermId) as usize - ptr as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_initialTermId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_maxPayloadLength) as usize - ptr as usize },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_maxPayloadLength)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_maxMessageLength) as usize - ptr as usize },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_maxMessageLength)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_positionBitsToShift) as usize - ptr as usize
                },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_positionBitsToShift)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_publicationLimit) as usize - ptr as usize },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_publicationLimit)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channelStatusId) as usize - ptr as usize },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_channelStatusId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                124usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_isClosed)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logBuffers) as usize - ptr as usize },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_logBuffers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_headerWriter) as usize - ptr as usize },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Publication),
                    "::",
                    stringify!(m_headerWriter)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron11Publication13channelStatusEv"]
            pub fn Publication_channelStatus(
                this: *const root::aeron::Publication,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron11Publication20localSocketAddressesB5cxx11Ev"]
            pub fn Publication_localSocketAddresses(this: *const root::aeron::Publication) -> u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron11Publication14addDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn Publication_addDestination(
                this: *mut root::aeron::Publication,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron11Publication17removeDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn Publication_removeDestination(
                this: *mut root::aeron::Publication,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron11Publication23findDestinationResponseEl"]
            pub fn Publication_findDestinationResponse(
                this: *mut root::aeron::Publication,
                correlationId: ::std::os::raw::c_long,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron11PublicationC1ERNS_15ClientConductorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElliiRNS_10concurrent6status20UnsafeBufferPositionEiSt10shared_ptrINS_10LogBuffersEE"]
            pub fn Publication_Publication(
                this: *mut root::aeron::Publication,
                conductor: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimit: *mut root::aeron::concurrent::status::UnsafeBufferPosition,
                channelStatusId: ::std::os::raw::c_int,
                logBuffers: [u64; 2usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron11PublicationD1Ev"]
            pub fn Publication_Publication_destructor(this: *mut root::aeron::Publication);
        }
        impl Publication {
            #[inline]
            pub unsafe fn channelStatus(&self) -> ::std::os::raw::c_long {
                Publication_channelStatus(self)
            }
            #[inline]
            pub unsafe fn localSocketAddresses(&self) -> u8 {
                Publication_localSocketAddresses(self)
            }
            #[inline]
            pub unsafe fn addDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                Publication_addDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn removeDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                Publication_removeDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn findDestinationResponse(
                &mut self,
                correlationId: ::std::os::raw::c_long,
            ) -> bool {
                Publication_findDestinationResponse(self, correlationId)
            }
            #[inline]
            pub unsafe fn new(
                conductor: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimit: *mut root::aeron::concurrent::status::UnsafeBufferPosition,
                channelStatusId: ::std::os::raw::c_int,
                logBuffers: [u64; 2usize],
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Publication_Publication(
                    __bindgen_tmp.as_mut_ptr(),
                    conductor,
                    channel,
                    registrationId,
                    originalRegistrationId,
                    streamId,
                    sessionId,
                    publicationLimit,
                    channelStatusId,
                    logBuffers,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Publication_Publication_destructor(self)
            }
        }
        #[repr(C)]
        pub struct ExclusivePublication {
            pub m_conductor: *mut root::aeron::ClientConductor,
            pub m_logMetaDataBuffer: *mut root::aeron::concurrent::AtomicBuffer,
            pub m_channel: root::std::string,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_maxPossiblePosition: ::std::os::raw::c_long,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_sessionId: ::std::os::raw::c_int,
            pub m_initialTermId: ::std::os::raw::c_int,
            pub m_maxPayloadLength: ::std::os::raw::c_int,
            pub m_maxMessageLength: ::std::os::raw::c_int,
            pub m_positionBitsToShift: ::std::os::raw::c_int,
            pub m_termOffset: ::std::os::raw::c_int,
            pub m_termId: ::std::os::raw::c_int,
            pub m_activePartitionIndex: ::std::os::raw::c_int,
            pub m_termBeginPosition: ::std::os::raw::c_long,
            pub m_publicationLimit: root::aeron::concurrent::status::ReadablePosition<
                root::aeron::concurrent::status::UnsafeBufferPosition,
            >,
            pub m_channelStatusId: ::std::os::raw::c_int,
            pub m_isClosed: u8,
            pub m_logBuffers: [u64; 2usize],
            pub m_headerWriter: root::aeron::concurrent::logbuffer::HeaderWriter,
        }
        #[test]
        fn bindgen_test_layout_ExclusivePublication() {
            const UNINIT: ::std::mem::MaybeUninit<ExclusivePublication> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ExclusivePublication>(),
                168usize,
                concat!("Size of: ", stringify!(ExclusivePublication))
            );
            assert_eq!(
                ::std::mem::align_of::<ExclusivePublication>(),
                8usize,
                concat!("Alignment of ", stringify!(ExclusivePublication))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductor) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_conductor)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logMetaDataBuffer) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_logMetaDataBuffer)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_maxPossiblePosition) as usize - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_maxPossiblePosition)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                68usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_sessionId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_initialTermId) as usize - ptr as usize },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_initialTermId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_maxPayloadLength) as usize - ptr as usize },
                76usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_maxPayloadLength)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_maxMessageLength) as usize - ptr as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_maxMessageLength)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_positionBitsToShift) as usize - ptr as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_positionBitsToShift)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_termOffset) as usize - ptr as usize },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_termOffset)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_termId) as usize - ptr as usize },
                92usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_termId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_activePartitionIndex) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_activePartitionIndex)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_termBeginPosition) as usize - ptr as usize },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_termBeginPosition)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_publicationLimit) as usize - ptr as usize },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_publicationLimit)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channelStatusId) as usize - ptr as usize },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_channelStatusId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_isClosed)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logBuffers) as usize - ptr as usize },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_logBuffers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_headerWriter) as usize - ptr as usize },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ExclusivePublication),
                    "::",
                    stringify!(m_headerWriter)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron20ExclusivePublication13channelStatusEv"]
            pub fn ExclusivePublication_channelStatus(
                this: *const root::aeron::ExclusivePublication,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron20ExclusivePublication20localSocketAddressesB5cxx11Ev"]
            pub fn ExclusivePublication_localSocketAddresses(
                this: *const root::aeron::ExclusivePublication,
            ) -> u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron20ExclusivePublication14addDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ExclusivePublication_addDestination(
                this: *mut root::aeron::ExclusivePublication,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron20ExclusivePublication17removeDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ExclusivePublication_removeDestination(
                this: *mut root::aeron::ExclusivePublication,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron20ExclusivePublication23findDestinationResponseEl"]
            pub fn ExclusivePublication_findDestinationResponse(
                this: *mut root::aeron::ExclusivePublication,
                correlationId: ::std::os::raw::c_long,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron20ExclusivePublicationC1ERNS_15ClientConductorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEliiRNS_10concurrent6status20UnsafeBufferPositionEiSt10shared_ptrINS_10LogBuffersEE"]
            pub fn ExclusivePublication_ExclusivePublication(
                this: *mut root::aeron::ExclusivePublication,
                conductor: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                registrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimit: *mut root::aeron::concurrent::status::UnsafeBufferPosition,
                channelStatusId: ::std::os::raw::c_int,
                logBuffers: [u64; 2usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron20ExclusivePublicationD1Ev"]
            pub fn ExclusivePublication_ExclusivePublication_destructor(
                this: *mut root::aeron::ExclusivePublication,
            );
        }
        impl ExclusivePublication {
            #[inline]
            pub unsafe fn channelStatus(&self) -> ::std::os::raw::c_long {
                ExclusivePublication_channelStatus(self)
            }
            #[inline]
            pub unsafe fn localSocketAddresses(&self) -> u8 {
                ExclusivePublication_localSocketAddresses(self)
            }
            #[inline]
            pub unsafe fn addDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ExclusivePublication_addDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn removeDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ExclusivePublication_removeDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn findDestinationResponse(
                &mut self,
                correlationId: ::std::os::raw::c_long,
            ) -> bool {
                ExclusivePublication_findDestinationResponse(self, correlationId)
            }
            #[inline]
            pub unsafe fn new(
                conductor: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                registrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimit: *mut root::aeron::concurrent::status::UnsafeBufferPosition,
                channelStatusId: ::std::os::raw::c_int,
                logBuffers: [u64; 2usize],
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ExclusivePublication_ExclusivePublication(
                    __bindgen_tmp.as_mut_ptr(),
                    conductor,
                    channel,
                    registrationId,
                    streamId,
                    sessionId,
                    publicationLimit,
                    channelStatusId,
                    logBuffers,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ExclusivePublication_ExclusivePublication_destructor(self)
            }
        }
        pub const ControlledPollAction_ABORT: root::aeron::ControlledPollAction = 1;
        pub const ControlledPollAction_BREAK: root::aeron::ControlledPollAction = 2;
        pub const ControlledPollAction_COMMIT: root::aeron::ControlledPollAction = 3;
        pub const ControlledPollAction_CONTINUE: root::aeron::ControlledPollAction = 4;
        pub type ControlledPollAction = ::std::os::raw::c_int;
        pub type controlled_poll_fragment_handler_t = u8;
        #[repr(C)]
        pub struct Image {
            pub m_sourceIdentity: root::std::string,
            pub m_logBuffers: [u64; 2usize],
            pub m_exceptionHandler: root::aeron::util::exception_handler_t,
            pub m_termBuffers: [u64; 6usize],
            pub m_subscriberPosition: root::aeron::concurrent::status::Position<
                root::aeron::concurrent::status::UnsafeBufferPosition,
            >,
            pub m_header: root::aeron::concurrent::logbuffer::Header,
            pub m_isClosed: u8,
            pub m_isEos: bool,
            pub m_termLengthMask: ::std::os::raw::c_int,
            pub m_positionBitsToShift: ::std::os::raw::c_int,
            pub m_sessionId: ::std::os::raw::c_int,
            pub m_joinPosition: ::std::os::raw::c_long,
            pub m_finalPosition: ::std::os::raw::c_long,
            pub m_subscriptionRegistrationId: ::std::os::raw::c_long,
            pub m_correlationId: ::std::os::raw::c_long,
        }
        pub type Image_list_t = [u64; 3usize];
        pub type Image_array_t = *mut [u64; 2usize];
        #[test]
        fn bindgen_test_layout_Image() {
            const UNINIT: ::std::mem::MaybeUninit<Image> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Image>(),
                240usize,
                concat!("Size of: ", stringify!(Image))
            );
            assert_eq!(
                ::std::mem::align_of::<Image>(),
                8usize,
                concat!("Alignment of ", stringify!(Image))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sourceIdentity) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_sourceIdentity)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logBuffers) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_logBuffers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_exceptionHandler) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_exceptionHandler)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_termBuffers) as usize - ptr as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_termBuffers)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_subscriberPosition) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_subscriberPosition)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_header) as usize - ptr as usize },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_header)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_isClosed)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isEos) as usize - ptr as usize },
                193usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_isEos)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_termLengthMask) as usize - ptr as usize },
                196usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_termLengthMask)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_positionBitsToShift) as usize - ptr as usize
                },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_positionBitsToShift)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                204usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_sessionId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_joinPosition) as usize - ptr as usize },
                208usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_joinPosition)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_finalPosition) as usize - ptr as usize },
                216usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_finalPosition)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_subscriptionRegistrationId) as usize
                        - ptr as usize
                },
                224usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_subscriptionRegistrationId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_correlationId) as usize - ptr as usize },
                232usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Image),
                    "::",
                    stringify!(m_correlationId)
                )
            );
        }
        #[repr(C)]
        pub struct Subscription {
            pub m_conductor: *mut root::aeron::ClientConductor,
            pub m_channel: root::std::string,
            pub m_channelStatusId: ::std::os::raw::c_int,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_isClosed: u8,
            pub m_imageArray: [u64; 4usize],
            pub m_paddingBefore: [::std::os::raw::c_char; 64usize],
            pub m_roundRobinIndex: usize,
            pub m_paddingAfter: [::std::os::raw::c_char; 64usize],
        }
        #[test]
        fn bindgen_test_layout_Subscription() {
            const UNINIT: ::std::mem::MaybeUninit<Subscription> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Subscription>(),
                232usize,
                concat!("Size of: ", stringify!(Subscription))
            );
            assert_eq!(
                ::std::mem::align_of::<Subscription>(),
                8usize,
                concat!("Alignment of ", stringify!(Subscription))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductor) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_conductor)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channelStatusId) as usize - ptr as usize },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_channelStatusId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                44usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_isClosed)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_imageArray) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_imageArray)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_paddingBefore) as usize - ptr as usize },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_paddingBefore)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_roundRobinIndex) as usize - ptr as usize },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_roundRobinIndex)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_paddingAfter) as usize - ptr as usize },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Subscription),
                    "::",
                    stringify!(m_paddingAfter)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron12Subscription13channelStatusEv"]
            pub fn Subscription_channelStatus(
                this: *const root::aeron::Subscription,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron12Subscription20localSocketAddressesB5cxx11Ev"]
            pub fn Subscription_localSocketAddresses(this: *const root::aeron::Subscription) -> u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron12Subscription29tryResolveChannelEndpointPortB5cxx11Ev"]
            pub fn Subscription_tryResolveChannelEndpointPort(
                this: *const root::aeron::Subscription,
            ) -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron12Subscription16resolvedEndpointB5cxx11Ev"]
            pub fn Subscription_resolvedEndpoint(
                this: *const root::aeron::Subscription,
            ) -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron12Subscription14addDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn Subscription_addDestination(
                this: *mut root::aeron::Subscription,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron12Subscription17removeDestinationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn Subscription_removeDestination(
                this: *mut root::aeron::Subscription,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron12Subscription23findDestinationResponseEl"]
            pub fn Subscription_findDestinationResponse(
                this: *mut root::aeron::Subscription,
                correlationId: ::std::os::raw::c_long,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron12SubscriptionC1ERNS_15ClientConductorElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii"]
            pub fn Subscription_Subscription(
                this: *mut root::aeron::Subscription,
                conductor: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
                channelStatusId: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron12SubscriptionD1Ev"]
            pub fn Subscription_Subscription_destructor(this: *mut root::aeron::Subscription);
        }
        impl Subscription {
            #[inline]
            pub unsafe fn channelStatus(&self) -> ::std::os::raw::c_long {
                Subscription_channelStatus(self)
            }
            #[inline]
            pub unsafe fn localSocketAddresses(&self) -> u8 {
                Subscription_localSocketAddresses(self)
            }
            #[inline]
            pub unsafe fn tryResolveChannelEndpointPort(&self) -> root::std::string {
                Subscription_tryResolveChannelEndpointPort(self)
            }
            #[inline]
            pub unsafe fn resolvedEndpoint(&self) -> root::std::string {
                Subscription_resolvedEndpoint(self)
            }
            #[inline]
            pub unsafe fn addDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                Subscription_addDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn removeDestination(
                &mut self,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                Subscription_removeDestination(self, endpointChannel)
            }
            #[inline]
            pub unsafe fn findDestinationResponse(
                &mut self,
                correlationId: ::std::os::raw::c_long,
            ) -> bool {
                Subscription_findDestinationResponse(self, correlationId)
            }
            #[inline]
            pub unsafe fn new(
                conductor: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
                channelStatusId: ::std::os::raw::c_int,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Subscription_Subscription(
                    __bindgen_tmp.as_mut_ptr(),
                    conductor,
                    registrationId,
                    channel,
                    streamId,
                    channelStatusId,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Subscription_Subscription_destructor(self)
            }
        }
        #[repr(C)]
        pub struct Counter {
            pub _base: root::aeron::concurrent::AtomicCounter,
            pub m_clientConductor: *mut root::aeron::ClientConductor,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_isClosed: u8,
        }
        #[test]
        fn bindgen_test_layout_Counter() {
            const UNINIT: ::std::mem::MaybeUninit<Counter> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Counter>(),
                72usize,
                concat!("Size of: ", stringify!(Counter))
            );
            assert_eq!(
                ::std::mem::align_of::<Counter>(),
                8usize,
                concat!("Alignment of ", stringify!(Counter))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_clientConductor) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Counter),
                    "::",
                    stringify!(m_clientConductor)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Counter),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Counter),
                    "::",
                    stringify!(m_isClosed)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron7Counter5stateEv"]
            pub fn Counter_state(this: *const root::aeron::Counter) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK5aeron7Counter5labelB5cxx11Ev"]
            pub fn Counter_label(this: *const root::aeron::Counter) -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron7CounterC1EPNS_15ClientConductorERNS_10concurrent12AtomicBufferEli"]
            pub fn Counter_Counter(
                this: *mut root::aeron::Counter,
                clientConductor: *mut root::aeron::ClientConductor,
                buffer: *mut root::aeron::concurrent::AtomicBuffer,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron7CounterD1Ev"]
            pub fn Counter_Counter_destructor(this: *mut root::aeron::Counter);
        }
        impl Counter {
            #[inline]
            pub unsafe fn state(&self) -> ::std::os::raw::c_int {
                Counter_state(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> root::std::string {
                Counter_label(self)
            }
            #[inline]
            pub unsafe fn new(
                clientConductor: *mut root::aeron::ClientConductor,
                buffer: *mut root::aeron::concurrent::AtomicBuffer,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Counter_Counter(
                    __bindgen_tmp.as_mut_ptr(),
                    clientConductor,
                    buffer,
                    registrationId,
                    counterId,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Counter_Counter_destructor(self)
            }
        }
        pub mod command {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct Flyweight<struct_t> {
                pub m_struct: *mut struct_t,
                pub m_buffer: root::aeron::concurrent::AtomicBuffer,
                pub m_baseOffset: root::aeron::util::index_t,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<struct_t>>,
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct CorrelatedMessageDefn {
                pub clientId: ::std::os::raw::c_long,
                pub correlationId: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_CorrelatedMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<CorrelatedMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CorrelatedMessageDefn>(),
                    16usize,
                    concat!("Size of: ", stringify!(CorrelatedMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<CorrelatedMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(CorrelatedMessageDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).clientId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CorrelatedMessageDefn),
                        "::",
                        stringify!(clientId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CorrelatedMessageDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct CorrelatedMessageFlyweight {
                pub _base:
                    root::aeron::command::Flyweight<root::aeron::command::CorrelatedMessageDefn>,
            }
            #[test]
            fn bindgen_test_layout_CorrelatedMessageFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<CorrelatedMessageFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(CorrelatedMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<CorrelatedMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CorrelatedMessageFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct PublicationBuffersReadyDefn {
                pub correlationId: ::std::os::raw::c_long,
                pub registrationId: ::std::os::raw::c_long,
                pub sessionId: ::std::os::raw::c_int,
                pub streamId: ::std::os::raw::c_int,
                pub positionLimitCounterId: ::std::os::raw::c_int,
                pub channelStatusIndicatorId: ::std::os::raw::c_int,
                pub logFileLength: ::std::os::raw::c_int,
                pub logFileData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_PublicationBuffersReadyDefn() {
                const UNINIT: ::std::mem::MaybeUninit<PublicationBuffersReadyDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<PublicationBuffersReadyDefn>(),
                    40usize,
                    concat!("Size of: ", stringify!(PublicationBuffersReadyDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<PublicationBuffersReadyDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(PublicationBuffersReadyDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).registrationId) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(registrationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).sessionId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(sessionId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
                    20usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(streamId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).positionLimitCounterId) as usize - ptr as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(positionLimitCounterId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).channelStatusIndicatorId) as usize
                            - ptr as usize
                    },
                    28usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(channelStatusIndicatorId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).logFileLength) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(logFileLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).logFileData) as usize - ptr as usize },
                    36usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationBuffersReadyDefn),
                        "::",
                        stringify!(logFileData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct PublicationBuffersReadyFlyweight {
                pub _base: root::aeron::command::Flyweight<
                    root::aeron::command::PublicationBuffersReadyDefn,
                >,
            }
            #[test]
            fn bindgen_test_layout_PublicationBuffersReadyFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<PublicationBuffersReadyFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(PublicationBuffersReadyFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<PublicationBuffersReadyFlyweight>(),
                    8usize,
                    concat!(
                        "Alignment of ",
                        stringify!(PublicationBuffersReadyFlyweight)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct PublicationMessageDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub streamId: ::std::os::raw::c_int,
                pub channelLength: ::std::os::raw::c_int,
                pub channelData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_PublicationMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<PublicationMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<PublicationMessageDefn>(),
                    28usize,
                    concat!("Size of: ", stringify!(PublicationMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<PublicationMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(PublicationMessageDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationMessageDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationMessageDefn),
                        "::",
                        stringify!(streamId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelLength) as usize - ptr as usize },
                    20usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationMessageDefn),
                        "::",
                        stringify!(channelLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelData) as usize - ptr as usize },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationMessageDefn),
                        "::",
                        stringify!(channelData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct PublicationMessageFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::PublicationMessageDefn,
            }
            #[test]
            fn bindgen_test_layout_PublicationMessageFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<PublicationMessageFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<PublicationMessageFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(PublicationMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<PublicationMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(PublicationMessageFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(PublicationMessageFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct RemoveMessageDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub registrationId: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_RemoveMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<RemoveMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<RemoveMessageDefn>(),
                    24usize,
                    concat!("Size of: ", stringify!(RemoveMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<RemoveMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(RemoveMessageDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RemoveMessageDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).registrationId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RemoveMessageDefn),
                        "::",
                        stringify!(registrationId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct RemoveMessageFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::RemoveMessageDefn,
            }
            #[test]
            fn bindgen_test_layout_RemoveMessageFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<RemoveMessageFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<RemoveMessageFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(RemoveMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<RemoveMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(RemoveMessageFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(RemoveMessageFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct SubscriptionMessageDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub registrationCorrelationId: ::std::os::raw::c_long,
                pub streamId: ::std::os::raw::c_int,
                pub channelLength: ::std::os::raw::c_int,
                pub channelData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_SubscriptionMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<SubscriptionMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<SubscriptionMessageDefn>(),
                    36usize,
                    concat!("Size of: ", stringify!(SubscriptionMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<SubscriptionMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(SubscriptionMessageDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).registrationCorrelationId) as usize
                            - ptr as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageDefn),
                        "::",
                        stringify!(registrationCorrelationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageDefn),
                        "::",
                        stringify!(streamId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelLength) as usize - ptr as usize },
                    28usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageDefn),
                        "::",
                        stringify!(channelLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelData) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageDefn),
                        "::",
                        stringify!(channelData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct SubscriptionMessageFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::SubscriptionMessageDefn,
            }
            #[test]
            fn bindgen_test_layout_SubscriptionMessageFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<SubscriptionMessageFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<SubscriptionMessageFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(SubscriptionMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<SubscriptionMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(SubscriptionMessageFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionMessageFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct DestinationMessageDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub registrationId: ::std::os::raw::c_long,
                pub channelLength: ::std::os::raw::c_int,
                pub channelData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_DestinationMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<DestinationMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<DestinationMessageDefn>(),
                    32usize,
                    concat!("Size of: ", stringify!(DestinationMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<DestinationMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(DestinationMessageDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(DestinationMessageDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).registrationId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(DestinationMessageDefn),
                        "::",
                        stringify!(registrationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelLength) as usize - ptr as usize },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(DestinationMessageDefn),
                        "::",
                        stringify!(channelLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelData) as usize - ptr as usize },
                    28usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(DestinationMessageDefn),
                        "::",
                        stringify!(channelData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct DestinationMessageFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::DestinationMessageDefn,
            }
            #[test]
            fn bindgen_test_layout_DestinationMessageFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<DestinationMessageFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<DestinationMessageFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(DestinationMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<DestinationMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(DestinationMessageFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(DestinationMessageFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct CounterMessageDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub typeId: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_CounterMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<CounterMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CounterMessageDefn>(),
                    20usize,
                    concat!("Size of: ", stringify!(CounterMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<CounterMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(CounterMessageDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CounterMessageDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).typeId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CounterMessageDefn),
                        "::",
                        stringify!(typeId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct CounterMessageFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::CounterMessageDefn,
            }
            #[test]
            fn bindgen_test_layout_CounterMessageFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<CounterMessageFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CounterMessageFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(CounterMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<CounterMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CounterMessageFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CounterMessageFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct TerminateDriverDefn {
                pub correlatedMessage: root::aeron::command::CorrelatedMessageDefn,
                pub tokenLength: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_TerminateDriverDefn() {
                const UNINIT: ::std::mem::MaybeUninit<TerminateDriverDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<TerminateDriverDefn>(),
                    20usize,
                    concat!("Size of: ", stringify!(TerminateDriverDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<TerminateDriverDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(TerminateDriverDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).correlatedMessage) as usize - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(TerminateDriverDefn),
                        "::",
                        stringify!(correlatedMessage)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).tokenLength) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(TerminateDriverDefn),
                        "::",
                        stringify!(tokenLength)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct TerminateDriverFlyweight {
                pub _base: root::aeron::command::CorrelatedMessageFlyweight,
                pub m_struct: *mut root::aeron::command::TerminateDriverDefn,
            }
            #[test]
            fn bindgen_test_layout_TerminateDriverFlyweight() {
                const UNINIT: ::std::mem::MaybeUninit<TerminateDriverFlyweight> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<TerminateDriverFlyweight>(),
                    40usize,
                    concat!("Size of: ", stringify!(TerminateDriverFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<TerminateDriverFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(TerminateDriverFlyweight))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).m_struct) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(TerminateDriverFlyweight),
                        "::",
                        stringify!(m_struct)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct ControlProtocolEvents {
                pub _address: u8,
            }
            pub const ControlProtocolEvents_ADD_PUBLICATION: ::std::os::raw::c_int = 1;
            pub const ControlProtocolEvents_REMOVE_PUBLICATION: ::std::os::raw::c_int = 2;
            pub const ControlProtocolEvents_ADD_EXCLUSIVE_PUBLICATION: ::std::os::raw::c_int = 3;
            pub const ControlProtocolEvents_ADD_SUBSCRIPTION: ::std::os::raw::c_int = 4;
            pub const ControlProtocolEvents_REMOVE_SUBSCRIPTION: ::std::os::raw::c_int = 5;
            pub const ControlProtocolEvents_CLIENT_KEEPALIVE: ::std::os::raw::c_int = 6;
            pub const ControlProtocolEvents_ADD_DESTINATION: ::std::os::raw::c_int = 7;
            pub const ControlProtocolEvents_REMOVE_DESTINATION: ::std::os::raw::c_int = 8;
            pub const ControlProtocolEvents_ADD_COUNTER: ::std::os::raw::c_int = 9;
            pub const ControlProtocolEvents_REMOVE_COUNTER: ::std::os::raw::c_int = 10;
            pub const ControlProtocolEvents_CLIENT_CLOSE: ::std::os::raw::c_int = 11;
            pub const ControlProtocolEvents_ADD_RCV_DESTINATION: ::std::os::raw::c_int = 12;
            pub const ControlProtocolEvents_REMOVE_RCV_DESTINATION: ::std::os::raw::c_int = 13;
            pub const ControlProtocolEvents_TERMINATE_DRIVER: ::std::os::raw::c_int = 14;
            pub const ControlProtocolEvents_ON_ERROR: ::std::os::raw::c_int = 3841;
            pub const ControlProtocolEvents_ON_AVAILABLE_IMAGE: ::std::os::raw::c_int = 3842;
            pub const ControlProtocolEvents_ON_PUBLICATION_READY: ::std::os::raw::c_int = 3843;
            pub const ControlProtocolEvents_ON_OPERATION_SUCCESS: ::std::os::raw::c_int = 3844;
            pub const ControlProtocolEvents_ON_UNAVAILABLE_IMAGE: ::std::os::raw::c_int = 3845;
            pub const ControlProtocolEvents_ON_EXCLUSIVE_PUBLICATION_READY: ::std::os::raw::c_int =
                3846;
            pub const ControlProtocolEvents_ON_SUBSCRIPTION_READY: ::std::os::raw::c_int = 3847;
            pub const ControlProtocolEvents_ON_COUNTER_READY: ::std::os::raw::c_int = 3848;
            pub const ControlProtocolEvents_ON_UNAVAILABLE_COUNTER: ::std::os::raw::c_int = 3849;
            pub const ControlProtocolEvents_ON_CLIENT_TIMEOUT: ::std::os::raw::c_int = 3850;
            #[test]
            fn bindgen_test_layout_ControlProtocolEvents() {
                assert_eq!(
                    ::std::mem::size_of::<ControlProtocolEvents>(),
                    1usize,
                    concat!("Size of: ", stringify!(ControlProtocolEvents))
                );
                assert_eq!(
                    ::std::mem::align_of::<ControlProtocolEvents>(),
                    1usize,
                    concat!("Alignment of ", stringify!(ControlProtocolEvents))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct ImageBuffersReadyDefn {
                pub correlationId: ::std::os::raw::c_long,
                pub sessionId: ::std::os::raw::c_int,
                pub streamId: ::std::os::raw::c_int,
                pub subscriptionRegistrationId: ::std::os::raw::c_long,
                pub subscriberPositionId: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_ImageBuffersReadyDefn() {
                const UNINIT: ::std::mem::MaybeUninit<ImageBuffersReadyDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<ImageBuffersReadyDefn>(),
                    28usize,
                    concat!("Size of: ", stringify!(ImageBuffersReadyDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<ImageBuffersReadyDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(ImageBuffersReadyDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageBuffersReadyDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).sessionId) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageBuffersReadyDefn),
                        "::",
                        stringify!(sessionId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageBuffersReadyDefn),
                        "::",
                        stringify!(streamId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).subscriptionRegistrationId) as usize
                            - ptr as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageBuffersReadyDefn),
                        "::",
                        stringify!(subscriptionRegistrationId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).subscriberPositionId) as usize - ptr as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageBuffersReadyDefn),
                        "::",
                        stringify!(subscriberPositionId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct ImageBuffersReadyFlyweight {
                pub _base:
                    root::aeron::command::Flyweight<root::aeron::command::ImageBuffersReadyDefn>,
            }
            #[test]
            fn bindgen_test_layout_ImageBuffersReadyFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<ImageBuffersReadyFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(ImageBuffersReadyFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<ImageBuffersReadyFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ImageBuffersReadyFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct ImageMessageDefn {
                pub correlationId: ::std::os::raw::c_long,
                pub subscriptionRegistrationId: ::std::os::raw::c_long,
                pub streamId: ::std::os::raw::c_int,
                pub channelLength: ::std::os::raw::c_int,
                pub channelData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_ImageMessageDefn() {
                const UNINIT: ::std::mem::MaybeUninit<ImageMessageDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<ImageMessageDefn>(),
                    28usize,
                    concat!("Size of: ", stringify!(ImageMessageDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<ImageMessageDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(ImageMessageDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageMessageDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).subscriptionRegistrationId) as usize
                            - ptr as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageMessageDefn),
                        "::",
                        stringify!(subscriptionRegistrationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageMessageDefn),
                        "::",
                        stringify!(streamId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelLength) as usize - ptr as usize },
                    20usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageMessageDefn),
                        "::",
                        stringify!(channelLength)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).channelData) as usize - ptr as usize },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ImageMessageDefn),
                        "::",
                        stringify!(channelData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct ImageMessageFlyweight {
                pub _base: root::aeron::command::Flyweight<root::aeron::command::ImageMessageDefn>,
            }
            #[test]
            fn bindgen_test_layout_ImageMessageFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<ImageMessageFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(ImageMessageFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<ImageMessageFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ImageMessageFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct ErrorResponseDefn {
                pub offendingCommandCorrelationId: ::std::os::raw::c_long,
                pub errorCode: ::std::os::raw::c_int,
                pub errorMessageLength: ::std::os::raw::c_int,
                pub errorMessageData: [::std::os::raw::c_schar; 1usize],
            }
            #[test]
            fn bindgen_test_layout_ErrorResponseDefn() {
                const UNINIT: ::std::mem::MaybeUninit<ErrorResponseDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<ErrorResponseDefn>(),
                    20usize,
                    concat!("Size of: ", stringify!(ErrorResponseDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<ErrorResponseDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(ErrorResponseDefn))
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).offendingCommandCorrelationId) as usize
                            - ptr as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ErrorResponseDefn),
                        "::",
                        stringify!(offendingCommandCorrelationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).errorCode) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ErrorResponseDefn),
                        "::",
                        stringify!(errorCode)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).errorMessageLength) as usize - ptr as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ErrorResponseDefn),
                        "::",
                        stringify!(errorMessageLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).errorMessageData) as usize - ptr as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ErrorResponseDefn),
                        "::",
                        stringify!(errorMessageData)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct ErrorResponseFlyweight {
                pub _base: root::aeron::command::Flyweight<root::aeron::command::ErrorResponseDefn>,
            }
            #[test]
            fn bindgen_test_layout_ErrorResponseFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<ErrorResponseFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(ErrorResponseFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<ErrorResponseFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ErrorResponseFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct OperationSucceededDefn {
                pub correlationId: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_OperationSucceededDefn() {
                const UNINIT: ::std::mem::MaybeUninit<OperationSucceededDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<OperationSucceededDefn>(),
                    8usize,
                    concat!("Size of: ", stringify!(OperationSucceededDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<OperationSucceededDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(OperationSucceededDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(OperationSucceededDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct OperationSucceededFlyweight {
                pub _base:
                    root::aeron::command::Flyweight<root::aeron::command::OperationSucceededDefn>,
            }
            #[test]
            fn bindgen_test_layout_OperationSucceededFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<OperationSucceededFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(OperationSucceededFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<OperationSucceededFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(OperationSucceededFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct SubscriptionReadyDefn {
                pub correlationId: ::std::os::raw::c_long,
                pub channelStatusIndicatorId: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_SubscriptionReadyDefn() {
                const UNINIT: ::std::mem::MaybeUninit<SubscriptionReadyDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<SubscriptionReadyDefn>(),
                    12usize,
                    concat!("Size of: ", stringify!(SubscriptionReadyDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<SubscriptionReadyDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(SubscriptionReadyDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionReadyDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).channelStatusIndicatorId) as usize
                            - ptr as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(SubscriptionReadyDefn),
                        "::",
                        stringify!(channelStatusIndicatorId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct SubscriptionReadyFlyweight {
                pub _base:
                    root::aeron::command::Flyweight<root::aeron::command::SubscriptionReadyDefn>,
            }
            #[test]
            fn bindgen_test_layout_SubscriptionReadyFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<SubscriptionReadyFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(SubscriptionReadyFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<SubscriptionReadyFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(SubscriptionReadyFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct CounterUpdateDefn {
                pub correlationId: ::std::os::raw::c_long,
                pub counterId: ::std::os::raw::c_int,
            }
            #[test]
            fn bindgen_test_layout_CounterUpdateDefn() {
                const UNINIT: ::std::mem::MaybeUninit<CounterUpdateDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<CounterUpdateDefn>(),
                    12usize,
                    concat!("Size of: ", stringify!(CounterUpdateDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<CounterUpdateDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(CounterUpdateDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CounterUpdateDefn),
                        "::",
                        stringify!(correlationId)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).counterId) as usize - ptr as usize },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(CounterUpdateDefn),
                        "::",
                        stringify!(counterId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct CounterUpdateFlyweight {
                pub _base: root::aeron::command::Flyweight<root::aeron::command::CounterUpdateDefn>,
            }
            #[test]
            fn bindgen_test_layout_CounterUpdateFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<CounterUpdateFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(CounterUpdateFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<CounterUpdateFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(CounterUpdateFlyweight))
                );
            }
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct ClientTimeoutDefn {
                pub clientId: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_ClientTimeoutDefn() {
                const UNINIT: ::std::mem::MaybeUninit<ClientTimeoutDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<ClientTimeoutDefn>(),
                    8usize,
                    concat!("Size of: ", stringify!(ClientTimeoutDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<ClientTimeoutDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(ClientTimeoutDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).clientId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(ClientTimeoutDefn),
                        "::",
                        stringify!(clientId)
                    )
                );
            }
            #[repr(C)]
            #[derive(Copy, Clone)]
            pub struct ClientTimeoutFlyweight {
                pub _base: root::aeron::command::Flyweight<root::aeron::command::ClientTimeoutDefn>,
            }
            #[test]
            fn bindgen_test_layout_ClientTimeoutFlyweight() {
                assert_eq!(
                    ::std::mem::size_of::<ClientTimeoutFlyweight>(),
                    32usize,
                    concat!("Size of: ", stringify!(ClientTimeoutFlyweight))
                );
                assert_eq!(
                    ::std::mem::align_of::<ClientTimeoutFlyweight>(),
                    8usize,
                    concat!("Alignment of ", stringify!(ClientTimeoutFlyweight))
                );
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct DriverProxy {
            pub m_toDriverCommandBuffer:
                *mut root::aeron::concurrent::ringbuffer::ManyToOneRingBuffer,
            pub m_clientId: ::std::os::raw::c_long,
        }
        pub type DriverProxy_driver_proxy_command_buffer_t = [u8; 4096usize];
        #[test]
        fn bindgen_test_layout_DriverProxy() {
            const UNINIT: ::std::mem::MaybeUninit<DriverProxy> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<DriverProxy>(),
                16usize,
                concat!("Size of: ", stringify!(DriverProxy))
            );
            assert_eq!(
                ::std::mem::align_of::<DriverProxy>(),
                8usize,
                concat!("Alignment of ", stringify!(DriverProxy))
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toDriverCommandBuffer) as usize - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(DriverProxy),
                    "::",
                    stringify!(m_toDriverCommandBuffer)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_clientId) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(DriverProxy),
                    "::",
                    stringify!(m_clientId)
                )
            );
        }
        pub mod CncFileDescriptor {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct MetaDataDefn {
                pub cncVersion: ::std::os::raw::c_int,
                pub toDriverBufferLength: ::std::os::raw::c_int,
                pub toClientsBufferLength: ::std::os::raw::c_int,
                pub counterMetadataBufferLength: ::std::os::raw::c_int,
                pub counterValuesBufferLength: ::std::os::raw::c_int,
                pub errorLogBufferLength: ::std::os::raw::c_int,
                pub clientLivenessTimeout: ::std::os::raw::c_long,
                pub startTimestamp: ::std::os::raw::c_long,
                pub pid: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_MetaDataDefn() {
                const UNINIT: ::std::mem::MaybeUninit<MetaDataDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<MetaDataDefn>(),
                    48usize,
                    concat!("Size of: ", stringify!(MetaDataDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<MetaDataDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(MetaDataDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).cncVersion) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(cncVersion)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).toDriverBufferLength) as usize - ptr as usize
                    },
                    4usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(toDriverBufferLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).toClientsBufferLength) as usize - ptr as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(toClientsBufferLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).counterMetadataBufferLength) as usize
                            - ptr as usize
                    },
                    12usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(counterMetadataBufferLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).counterValuesBufferLength) as usize
                            - ptr as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(counterValuesBufferLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).errorLogBufferLength) as usize - ptr as usize
                    },
                    20usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(errorLogBufferLength)
                    )
                );
                assert_eq!(
                    unsafe {
                        ::std::ptr::addr_of!((*ptr).clientLivenessTimeout) as usize - ptr as usize
                    },
                    24usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(clientLivenessTimeout)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).startTimestamp) as usize - ptr as usize },
                    32usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(startTimestamp)
                    )
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
                    40usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(MetaDataDefn),
                        "::",
                        stringify!(pid)
                    )
                );
            }
        }
        pub type on_available_image_t = [u64; 4usize];
        pub type on_unavailable_image_t = [u64; 4usize];
        pub type on_new_publication_t = [u64; 4usize];
        pub type on_new_subscription_t = [u64; 4usize];
        pub type on_available_counter_t = [u64; 4usize];
        pub type on_unavailable_counter_t = [u64; 4usize];
        pub type on_close_client_t = [u64; 4usize];
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct Context {
            pub m_dirName: root::std::string,
            pub m_exceptionHandler: root::aeron::util::exception_handler_t,
            pub m_onNewPublicationHandler: root::aeron::on_new_publication_t,
            pub m_onNewExclusivePublicationHandler: root::aeron::on_new_publication_t,
            pub m_onNewSubscriptionHandler: root::aeron::on_new_subscription_t,
            pub m_onAvailableImageHandler: root::aeron::on_available_image_t,
            pub m_onUnavailableImageHandler: root::aeron::on_unavailable_image_t,
            pub m_onAvailableCounterHandler: root::aeron::on_available_counter_t,
            pub m_onUnavailableCounterHandler: root::aeron::on_unavailable_counter_t,
            pub m_onCloseClientHandler: root::aeron::on_close_client_t,
            pub m_mediaDriverTimeout: ::std::os::raw::c_long,
            pub m_resourceLingerTimeout: ::std::os::raw::c_long,
            pub m_useConductorAgentInvoker: bool,
            pub m_isOnNewExclusivePublicationHandlerSet: bool,
            pub m_preTouchMappedMemory: bool,
        }
        #[test]
        fn bindgen_test_layout_Context() {
            const UNINIT: ::std::mem::MaybeUninit<Context> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Context>(),
                344usize,
                concat!("Size of: ", stringify!(Context))
            );
            assert_eq!(
                ::std::mem::align_of::<Context>(),
                8usize,
                concat!("Alignment of ", stringify!(Context))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_dirName) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_dirName)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_exceptionHandler) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_exceptionHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewPublicationHandler) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onNewPublicationHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewExclusivePublicationHandler) as usize
                        - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onNewExclusivePublicationHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewSubscriptionHandler) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onNewSubscriptionHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onAvailableImageHandler) as usize - ptr as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onAvailableImageHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onUnavailableImageHandler) as usize - ptr as usize
                },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onUnavailableImageHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onAvailableCounterHandler) as usize - ptr as usize
                },
                224usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onAvailableCounterHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onUnavailableCounterHandler) as usize
                        - ptr as usize
                },
                256usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onUnavailableCounterHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onCloseClientHandler) as usize - ptr as usize
                },
                288usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_onCloseClientHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_mediaDriverTimeout) as usize - ptr as usize
                },
                320usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_mediaDriverTimeout)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_resourceLingerTimeout) as usize - ptr as usize
                },
                328usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_resourceLingerTimeout)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_useConductorAgentInvoker) as usize - ptr as usize
                },
                336usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_useConductorAgentInvoker)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_isOnNewExclusivePublicationHandlerSet) as usize
                        - ptr as usize
                },
                337usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_isOnNewExclusivePublicationHandlerSet)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_preTouchMappedMemory) as usize - ptr as usize
                },
                338usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Context),
                    "::",
                    stringify!(m_preTouchMappedMemory)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron7Context24requestDriverTerminationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhm"]
            pub fn Context_requestDriverTermination(
                directory: *const root::std::string,
                tokenBuffer: *mut ::std::os::raw::c_uchar,
                tokenLength: usize,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron7Context16defaultAeronPathB5cxx11Ev"]
            pub fn Context_defaultAeronPath() -> root::std::string;
        }
        impl Context {
            #[inline]
            pub unsafe fn requestDriverTermination(
                directory: *const root::std::string,
                tokenBuffer: *mut ::std::os::raw::c_uchar,
                tokenLength: usize,
            ) -> bool {
                Context_requestDriverTermination(directory, tokenBuffer, tokenLength)
            }
            #[inline]
            pub unsafe fn defaultAeronPath() -> root::std::string {
                Context_defaultAeronPath()
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct DriverListenerAdapter<DriverListener> {
            pub m_broadcastReceiver: *mut root::aeron::concurrent::broadcast::CopyBroadcastReceiver,
            pub m_driverListener: *mut DriverListener,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<DriverListener>>,
        }
        pub mod HeartbeatTimestamp {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C, packed(4))]
            #[derive(Copy, Clone)]
            pub struct HeartbeatTimestampKeyDefn {
                pub registrationId: ::std::os::raw::c_long,
            }
            #[test]
            fn bindgen_test_layout_HeartbeatTimestampKeyDefn() {
                const UNINIT: ::std::mem::MaybeUninit<HeartbeatTimestampKeyDefn> =
                    ::std::mem::MaybeUninit::uninit();
                let ptr = UNINIT.as_ptr();
                assert_eq!(
                    ::std::mem::size_of::<HeartbeatTimestampKeyDefn>(),
                    8usize,
                    concat!("Size of: ", stringify!(HeartbeatTimestampKeyDefn))
                );
                assert_eq!(
                    ::std::mem::align_of::<HeartbeatTimestampKeyDefn>(),
                    4usize,
                    concat!("Alignment of ", stringify!(HeartbeatTimestampKeyDefn))
                );
                assert_eq!(
                    unsafe { ::std::ptr::addr_of!((*ptr).registrationId) as usize - ptr as usize },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(HeartbeatTimestampKeyDefn),
                        "::",
                        stringify!(registrationId)
                    )
                );
            }
        }
        pub type epoch_clock_t = [u64; 4usize];
        pub type nano_clock_t = [u64; 4usize];
        #[repr(C)]
        pub struct ClientConductor {
            pub m_publicationByRegistrationId: [u64; 7usize],
            pub m_exclusivePublicationByRegistrationId: [u64; 7usize],
            pub m_subscriptionByRegistrationId: [u64; 7usize],
            pub m_counterByRegistrationId: [u64; 7usize],
            pub m_destinationStateByCorrelationId: [u64; 7usize],
            pub m_logBuffersByRegistrationId: [u64; 7usize],
            pub m_lingeringImageLists: [u64; 3usize],
            pub m_driverProxy: *mut root::aeron::DriverProxy,
            pub m_driverListenerAdapter:
                root::aeron::DriverListenerAdapter<root::aeron::ClientConductor>,
            pub m_countersReader: root::aeron::concurrent::CountersReader,
            pub m_counterValuesBuffer: *mut root::aeron::concurrent::AtomicBuffer,
            pub m_onNewPublicationHandler: root::aeron::on_new_publication_t,
            pub m_onNewExclusivePublicationHandler: root::aeron::on_new_publication_t,
            pub m_onNewSubscriptionHandler: root::aeron::on_new_subscription_t,
            pub m_errorHandler: root::aeron::util::exception_handler_t,
            pub m_onAvailableCounterHandlers: [u64; 3usize],
            pub m_onUnavailableCounterHandlers: [u64; 3usize],
            pub m_onCloseClientHandlers: [u64; 3usize],
            pub m_epochClock: root::aeron::epoch_clock_t,
            pub m_driverTimeoutMs: ::std::os::raw::c_long,
            pub m_resourceLingerTimeoutMs: ::std::os::raw::c_long,
            pub m_interServiceTimeoutMs: ::std::os::raw::c_long,
            pub m_preTouchMappedMemory: bool,
            pub m_isInCallback: bool,
            pub m_driverActive: u8,
            pub m_isClosed: u8,
            pub m_adminLock: root::std::recursive_mutex,
            pub m_heartbeatTimestamp: u64,
            pub m_timeOfLastDoWorkMs: ::std::os::raw::c_longlong,
            pub m_timeOfLastKeepaliveMs: ::std::os::raw::c_longlong,
            pub m_timeOfLastCheckManagedResourcesMs: ::std::os::raw::c_longlong,
            pub m_padding: [::std::os::raw::c_char; 64usize],
        }
        pub const ClientConductor_RegistrationStatus_AWAITING_MEDIA_DRIVER:
            root::aeron::ClientConductor_RegistrationStatus = 0;
        pub const ClientConductor_RegistrationStatus_REGISTERED_MEDIA_DRIVER:
            root::aeron::ClientConductor_RegistrationStatus = 1;
        pub const ClientConductor_RegistrationStatus_ERRORED_MEDIA_DRIVER:
            root::aeron::ClientConductor_RegistrationStatus = 2;
        pub type ClientConductor_RegistrationStatus = ::std::os::raw::c_schar;
        #[repr(C)]
        pub struct ClientConductor_PublicationStateDefn {
            pub m_errorMessage: root::std::string,
            pub m_buffers: [u64; 2usize],
            pub m_publication: [u64; 2usize],
            pub m_channel: root::std::string,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_originalRegistrationId: ::std::os::raw::c_long,
            pub m_timeOfRegistrationMs: ::std::os::raw::c_longlong,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_sessionId: ::std::os::raw::c_int,
            pub m_publicationLimitCounterId: ::std::os::raw::c_int,
            pub m_channelStatusId: ::std::os::raw::c_int,
            pub m_errorCode: ::std::os::raw::c_int,
            pub m_status: root::aeron::ClientConductor_RegistrationStatus,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_PublicationStateDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_PublicationStateDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_PublicationStateDefn>(),
                144usize,
                concat!(
                    "Size of: ",
                    stringify!(ClientConductor_PublicationStateDefn)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_PublicationStateDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_PublicationStateDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorMessage) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_errorMessage)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_buffers) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_buffers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_publication) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_publication)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_originalRegistrationId) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_originalRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfRegistrationMs) as usize - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_timeOfRegistrationMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                124usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_sessionId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_publicationLimitCounterId) as usize - ptr as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_publicationLimitCounterId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channelStatusId) as usize - ptr as usize },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_channelStatusId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_errorCode)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_status) as usize - ptr as usize },
                140usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_PublicationStateDefn),
                    "::",
                    stringify!(m_status)
                )
            );
        }
        #[repr(C)]
        pub struct ClientConductor_ExclusivePublicationStateDefn {
            pub m_errorMessage: root::std::string,
            pub m_buffers: [u64; 2usize],
            pub m_publication: [u64; 2usize],
            pub m_channel: root::std::string,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_timeOfRegistrationMs: ::std::os::raw::c_longlong,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_sessionId: ::std::os::raw::c_int,
            pub m_publicationLimitCounterId: ::std::os::raw::c_int,
            pub m_channelStatusId: ::std::os::raw::c_int,
            pub m_errorCode: ::std::os::raw::c_int,
            pub m_status: root::aeron::ClientConductor_RegistrationStatus,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_ExclusivePublicationStateDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_ExclusivePublicationStateDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_ExclusivePublicationStateDefn>(),
                136usize,
                concat!(
                    "Size of: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_ExclusivePublicationStateDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorMessage) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_errorMessage)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_buffers) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_buffers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_publication) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_publication)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfRegistrationMs) as usize - ptr as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_timeOfRegistrationMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_sessionId) as usize - ptr as usize },
                116usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_sessionId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_publicationLimitCounterId) as usize - ptr as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_publicationLimitCounterId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channelStatusId) as usize - ptr as usize },
                124usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_channelStatusId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_errorCode)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_status) as usize - ptr as usize },
                132usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ExclusivePublicationStateDefn),
                    "::",
                    stringify!(m_status)
                )
            );
        }
        #[repr(C)]
        pub struct ClientConductor_SubscriptionStateDefn {
            pub m_errorMessage: root::std::string,
            pub m_subscriptionCache: [u64; 2usize],
            pub m_subscription: [u64; 2usize],
            pub m_onAvailableImageHandler: root::aeron::on_available_image_t,
            pub m_onUnavailableImageHandler: root::aeron::on_unavailable_image_t,
            pub m_channel: root::std::string,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_timeOfRegistrationMs: ::std::os::raw::c_longlong,
            pub m_streamId: ::std::os::raw::c_int,
            pub m_errorCode: ::std::os::raw::c_int,
            pub m_status: root::aeron::ClientConductor_RegistrationStatus,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_SubscriptionStateDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_SubscriptionStateDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_SubscriptionStateDefn>(),
                192usize,
                concat!(
                    "Size of: ",
                    stringify!(ClientConductor_SubscriptionStateDefn)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_SubscriptionStateDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_SubscriptionStateDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorMessage) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_errorMessage)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_subscriptionCache) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_subscriptionCache)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_subscription) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_subscription)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onAvailableImageHandler) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_onAvailableImageHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onUnavailableImageHandler) as usize - ptr as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_onUnavailableImageHandler)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_channel) as usize - ptr as usize },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_channel)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfRegistrationMs) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_timeOfRegistrationMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_streamId) as usize - ptr as usize },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_streamId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                180usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_errorCode)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_status) as usize - ptr as usize },
                184usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_SubscriptionStateDefn),
                    "::",
                    stringify!(m_status)
                )
            );
        }
        #[repr(C)]
        pub struct ClientConductor_CounterStateDefn {
            pub m_errorMessage: root::std::string,
            pub m_counterCache: [u64; 2usize],
            pub m_counter: [u64; 2usize],
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_timeOfRegistrationMs: ::std::os::raw::c_longlong,
            pub m_counterId: ::std::os::raw::c_int,
            pub m_status: root::aeron::ClientConductor_RegistrationStatus,
            pub m_errorCode: ::std::os::raw::c_int,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_CounterStateDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_CounterStateDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_CounterStateDefn>(),
                96usize,
                concat!("Size of: ", stringify!(ClientConductor_CounterStateDefn))
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_CounterStateDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_CounterStateDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorMessage) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_errorMessage)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_counterCache) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_counterCache)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_counter) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_counter)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfRegistrationMs) as usize - ptr as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_timeOfRegistrationMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_counterId) as usize - ptr as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_counterId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_status) as usize - ptr as usize },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_status)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_CounterStateDefn),
                    "::",
                    stringify!(m_errorCode)
                )
            );
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct ClientConductor_ImageListLingerDefn {
            pub m_imageArray: root::aeron::Image_array_t,
            pub m_timeOfLastStateChangeMs: ::std::os::raw::c_longlong,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_ImageListLingerDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_ImageListLingerDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_ImageListLingerDefn>(),
                16usize,
                concat!("Size of: ", stringify!(ClientConductor_ImageListLingerDefn))
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_ImageListLingerDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_ImageListLingerDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_imageArray) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ImageListLingerDefn),
                    "::",
                    stringify!(m_imageArray)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfLastStateChangeMs) as usize - ptr as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_ImageListLingerDefn),
                    "::",
                    stringify!(m_timeOfLastStateChangeMs)
                )
            );
        }
        #[repr(C)]
        pub struct ClientConductor_LogBuffersDefn {
            pub m_logBuffers: [u64; 2usize],
            pub m_timeOfLastStateChangeMs: ::std::os::raw::c_longlong,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_LogBuffersDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_LogBuffersDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_LogBuffersDefn>(),
                24usize,
                concat!("Size of: ", stringify!(ClientConductor_LogBuffersDefn))
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_LogBuffersDefn>(),
                8usize,
                concat!("Alignment of ", stringify!(ClientConductor_LogBuffersDefn))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_logBuffers) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_LogBuffersDefn),
                    "::",
                    stringify!(m_logBuffers)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfLastStateChangeMs) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_LogBuffersDefn),
                    "::",
                    stringify!(m_timeOfLastStateChangeMs)
                )
            );
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct ClientConductor_DestinationStateDefn {
            pub m_errorMessage: root::std::string,
            pub m_correlationId: ::std::os::raw::c_long,
            pub m_registrationId: ::std::os::raw::c_long,
            pub m_timeOfRegistrationMs: ::std::os::raw::c_longlong,
            pub m_errorCode: ::std::os::raw::c_int,
            pub m_status: root::aeron::ClientConductor_RegistrationStatus,
        }
        #[test]
        fn bindgen_test_layout_ClientConductor_DestinationStateDefn() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor_DestinationStateDefn> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor_DestinationStateDefn>(),
                64usize,
                concat!(
                    "Size of: ",
                    stringify!(ClientConductor_DestinationStateDefn)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor_DestinationStateDefn>(),
                8usize,
                concat!(
                    "Alignment of ",
                    stringify!(ClientConductor_DestinationStateDefn)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorMessage) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_errorMessage)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_correlationId) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_correlationId)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_registrationId) as usize - ptr as usize },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_registrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfRegistrationMs) as usize - ptr as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_timeOfRegistrationMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorCode) as usize - ptr as usize },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_errorCode)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_status) as usize - ptr as usize },
                60usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor_DestinationStateDefn),
                    "::",
                    stringify!(m_status)
                )
            );
        }
        #[test]
        fn bindgen_test_layout_ClientConductor() {
            const UNINIT: ::std::mem::MaybeUninit<ClientConductor> =
                ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<ClientConductor>(),
                832usize,
                concat!("Size of: ", stringify!(ClientConductor))
            );
            assert_eq!(
                ::std::mem::align_of::<ClientConductor>(),
                8usize,
                concat!("Alignment of ", stringify!(ClientConductor))
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_publicationByRegistrationId) as usize
                        - ptr as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_publicationByRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_exclusivePublicationByRegistrationId) as usize
                        - ptr as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_exclusivePublicationByRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_subscriptionByRegistrationId) as usize
                        - ptr as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_subscriptionByRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_counterByRegistrationId) as usize - ptr as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_counterByRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_destinationStateByCorrelationId) as usize
                        - ptr as usize
                },
                224usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_destinationStateByCorrelationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_logBuffersByRegistrationId) as usize
                        - ptr as usize
                },
                280usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_logBuffersByRegistrationId)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_lingeringImageLists) as usize - ptr as usize
                },
                336usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_lingeringImageLists)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_driverProxy) as usize - ptr as usize },
                360usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_driverProxy)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_driverListenerAdapter) as usize - ptr as usize
                },
                368usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_driverListenerAdapter)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_countersReader) as usize - ptr as usize },
                384usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_countersReader)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_counterValuesBuffer) as usize - ptr as usize
                },
                424usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_counterValuesBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewPublicationHandler) as usize - ptr as usize
                },
                432usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onNewPublicationHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewExclusivePublicationHandler) as usize
                        - ptr as usize
                },
                464usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onNewExclusivePublicationHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onNewSubscriptionHandler) as usize - ptr as usize
                },
                496usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onNewSubscriptionHandler)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_errorHandler) as usize - ptr as usize },
                528usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_errorHandler)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onAvailableCounterHandlers) as usize
                        - ptr as usize
                },
                560usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onAvailableCounterHandlers)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onUnavailableCounterHandlers) as usize
                        - ptr as usize
                },
                584usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onUnavailableCounterHandlers)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_onCloseClientHandlers) as usize - ptr as usize
                },
                608usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_onCloseClientHandlers)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_epochClock) as usize - ptr as usize },
                632usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_epochClock)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_driverTimeoutMs) as usize - ptr as usize },
                664usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_driverTimeoutMs)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_resourceLingerTimeoutMs) as usize - ptr as usize
                },
                672usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_resourceLingerTimeoutMs)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_interServiceTimeoutMs) as usize - ptr as usize
                },
                680usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_interServiceTimeoutMs)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_preTouchMappedMemory) as usize - ptr as usize
                },
                688usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_preTouchMappedMemory)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isInCallback) as usize - ptr as usize },
                689usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_isInCallback)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_driverActive) as usize - ptr as usize },
                690usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_driverActive)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_isClosed) as usize - ptr as usize },
                691usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_isClosed)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_adminLock) as usize - ptr as usize },
                696usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_adminLock)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_heartbeatTimestamp) as usize - ptr as usize
                },
                736usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_heartbeatTimestamp)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfLastDoWorkMs) as usize - ptr as usize
                },
                744usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_timeOfLastDoWorkMs)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfLastKeepaliveMs) as usize - ptr as usize
                },
                752usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_timeOfLastKeepaliveMs)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_timeOfLastCheckManagedResourcesMs) as usize
                        - ptr as usize
                },
                760usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_timeOfLastCheckManagedResourcesMs)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_padding) as usize - ptr as usize },
                768usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ClientConductor),
                    "::",
                    stringify!(m_padding)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor7onStartEv"]
            pub fn ClientConductor_onStart(this: *mut root::aeron::ClientConductor);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor6doWorkEv"]
            pub fn ClientConductor_doWork(
                this: *mut root::aeron::ClientConductor,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor7onCloseEv"]
            pub fn ClientConductor_onClose(this: *mut root::aeron::ClientConductor);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor14addPublicationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
            pub fn ClientConductor_addPublication(
                this: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor15findPublicationEl"]
            pub fn ClientConductor_findPublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor18releasePublicationEl"]
            pub fn ClientConductor_releasePublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor23addExclusivePublicationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
            pub fn ClientConductor_addExclusivePublication(
                this: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor24findExclusivePublicationEl"]
            pub fn ClientConductor_findExclusivePublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor27releaseExclusivePublicationEl"]
            pub fn ClientConductor_releaseExclusivePublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor15addSubscriptionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRKSt8functionIFvRNS_5ImageEEESF_"]
            pub fn ClientConductor_addSubscription(
                this: *mut root::aeron::ClientConductor,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
                onAvailableImageHandler: *const root::aeron::on_available_image_t,
                onUnavailableImageHandler: *const root::aeron::on_unavailable_image_t,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor16findSubscriptionEl"]
            pub fn ClientConductor_findSubscription(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor19releaseSubscriptionElPSt10shared_ptrINS_5ImageEEm"]
            pub fn ClientConductor_releaseSubscription(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                imageArray: root::aeron::Image_array_t,
                length: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor10addCounterEiPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_addCounter(
                this: *mut root::aeron::ClientConductor,
                typeId: ::std::os::raw::c_int,
                keyBuffer: *mut ::std::os::raw::c_uchar,
                keyLength: usize,
                label: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor11findCounterEl"]
            pub fn ClientConductor_findCounter(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor14releaseCounterEl"]
            pub fn ClientConductor_releaseCounter(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor23findDestinationResponseEl"]
            pub fn ClientConductor_findDestinationResponse(
                this: *mut root::aeron::ClientConductor,
                correlationId: ::std::os::raw::c_long,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor16onNewPublicationElliiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_onNewPublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimitCounterId: ::std::os::raw::c_int,
                channelStatusIndicatorId: ::std::os::raw::c_int,
                logFilename: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor25onNewExclusivePublicationElliiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_onNewExclusivePublication(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimitCounterId: ::std::os::raw::c_int,
                channelStatusIndicatorId: ::std::os::raw::c_int,
                logFilename: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor19onSubscriptionReadyEli"]
            pub fn ClientConductor_onSubscriptionReady(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                channelStatusId: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor18onOperationSuccessEl"]
            pub fn ClientConductor_onOperationSuccess(
                this: *mut root::aeron::ClientConductor,
                correlationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor30onChannelEndpointErrorResponseEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_onChannelEndpointErrorResponse(
                this: *mut root::aeron::ClientConductor,
                channelStatusId: ::std::os::raw::c_int,
                errorMessage: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor15onErrorResponseEliRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_onErrorResponse(
                this: *mut root::aeron::ClientConductor,
                offendingCommandCorrelationId: ::std::os::raw::c_long,
                errorCode: ::std::os::raw::c_int,
                errorMessage: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor16onAvailableImageEliilRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
            pub fn ClientConductor_onAvailableImage(
                this: *mut root::aeron::ClientConductor,
                correlationId: ::std::os::raw::c_long,
                sessionId: ::std::os::raw::c_int,
                subscriberPositionId: ::std::os::raw::c_int,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                logFilename: *const root::std::string,
                sourceIdentity: *const root::std::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor18onUnavailableImageEll"]
            pub fn ClientConductor_onUnavailableImage(
                this: *mut root::aeron::ClientConductor,
                correlationId: ::std::os::raw::c_long,
                subscriptionRegistrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor18onAvailableCounterEli"]
            pub fn ClientConductor_onAvailableCounter(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor20onUnavailableCounterEli"]
            pub fn ClientConductor_onUnavailableCounter(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor15onClientTimeoutEl"]
            pub fn ClientConductor_onClientTimeout(
                this: *mut root::aeron::ClientConductor,
                clientId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor17closeAllResourcesEx"]
            pub fn ClientConductor_closeAllResources(
                this: *mut root::aeron::ClientConductor,
                nowMs: ::std::os::raw::c_longlong,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor14addDestinationElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_addDestination(
                this: *mut root::aeron::ClientConductor,
                publicationRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor17removeDestinationElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_removeDestination(
                this: *mut root::aeron::ClientConductor,
                publicationRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor17addRcvDestinationElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_addRcvDestination(
                this: *mut root::aeron::ClientConductor,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor20removeRcvDestinationElRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ClientConductor_removeRcvDestination(
                this: *mut root::aeron::ClientConductor,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor26addAvailableCounterHandlerERKSt8functionIFvRNS_10concurrent14CountersReaderEliEE"]
            pub fn ClientConductor_addAvailableCounterHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_available_counter_t,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor29removeAvailableCounterHandlerERKSt8functionIFvRNS_10concurrent14CountersReaderEliEE"]
            pub fn ClientConductor_removeAvailableCounterHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_available_counter_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor29removeAvailableCounterHandlerEl"]
            pub fn ClientConductor_removeAvailableCounterHandler1(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor28addUnavailableCounterHandlerERKSt8functionIFvRNS_10concurrent14CountersReaderEliEE"]
            pub fn ClientConductor_addUnavailableCounterHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_unavailable_counter_t,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor31removeUnavailableCounterHandlerERKSt8functionIFvRNS_10concurrent14CountersReaderEliEE"]
            pub fn ClientConductor_removeUnavailableCounterHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_unavailable_counter_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor31removeUnavailableCounterHandlerEl"]
            pub fn ClientConductor_removeUnavailableCounterHandler1(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor21addCloseClientHandlerERKSt8functionIFvvEE"]
            pub fn ClientConductor_addCloseClientHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_close_client_t,
            ) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor24removeCloseClientHandlerERKSt8functionIFvvEE"]
            pub fn ClientConductor_removeCloseClientHandler(
                this: *mut root::aeron::ClientConductor,
                handler: *const root::aeron::on_close_client_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductor24removeCloseClientHandlerEl"]
            pub fn ClientConductor_removeCloseClientHandler1(
                this: *mut root::aeron::ClientConductor,
                registrationId: ::std::os::raw::c_long,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron15ClientConductorD1Ev"]
            pub fn ClientConductor_ClientConductor_destructor(
                this: *mut root::aeron::ClientConductor,
            );
        }
        impl ClientConductor {
            #[inline]
            pub unsafe fn onStart(&mut self) {
                ClientConductor_onStart(self)
            }
            #[inline]
            pub unsafe fn doWork(&mut self) -> ::std::os::raw::c_int {
                ClientConductor_doWork(self)
            }
            #[inline]
            pub unsafe fn onClose(&mut self) {
                ClientConductor_onClose(self)
            }
            #[inline]
            pub unsafe fn addPublication(
                &mut self,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addPublication(self, channel, streamId)
            }
            #[inline]
            pub unsafe fn findPublication(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize] {
                ClientConductor_findPublication(self, registrationId)
            }
            #[inline]
            pub unsafe fn releasePublication(&mut self, registrationId: ::std::os::raw::c_long) {
                ClientConductor_releasePublication(self, registrationId)
            }
            #[inline]
            pub unsafe fn addExclusivePublication(
                &mut self,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addExclusivePublication(self, channel, streamId)
            }
            #[inline]
            pub unsafe fn findExclusivePublication(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize] {
                ClientConductor_findExclusivePublication(self, registrationId)
            }
            #[inline]
            pub unsafe fn releaseExclusivePublication(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) {
                ClientConductor_releaseExclusivePublication(self, registrationId)
            }
            #[inline]
            pub unsafe fn addSubscription(
                &mut self,
                channel: *const root::std::string,
                streamId: ::std::os::raw::c_int,
                onAvailableImageHandler: *const root::aeron::on_available_image_t,
                onUnavailableImageHandler: *const root::aeron::on_unavailable_image_t,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addSubscription(
                    self,
                    channel,
                    streamId,
                    onAvailableImageHandler,
                    onUnavailableImageHandler,
                )
            }
            #[inline]
            pub unsafe fn findSubscription(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize] {
                ClientConductor_findSubscription(self, registrationId)
            }
            #[inline]
            pub unsafe fn releaseSubscription(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                imageArray: root::aeron::Image_array_t,
                length: usize,
            ) {
                ClientConductor_releaseSubscription(self, registrationId, imageArray, length)
            }
            #[inline]
            pub unsafe fn addCounter(
                &mut self,
                typeId: ::std::os::raw::c_int,
                keyBuffer: *mut ::std::os::raw::c_uchar,
                keyLength: usize,
                label: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addCounter(self, typeId, keyBuffer, keyLength, label)
            }
            #[inline]
            pub unsafe fn findCounter(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) -> [u64; 2usize] {
                ClientConductor_findCounter(self, registrationId)
            }
            #[inline]
            pub unsafe fn releaseCounter(&mut self, registrationId: ::std::os::raw::c_long) {
                ClientConductor_releaseCounter(self, registrationId)
            }
            #[inline]
            pub unsafe fn findDestinationResponse(
                &mut self,
                correlationId: ::std::os::raw::c_long,
            ) -> bool {
                ClientConductor_findDestinationResponse(self, correlationId)
            }
            #[inline]
            pub unsafe fn onNewPublication(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimitCounterId: ::std::os::raw::c_int,
                channelStatusIndicatorId: ::std::os::raw::c_int,
                logFilename: *const root::std::string,
            ) {
                ClientConductor_onNewPublication(
                    self,
                    registrationId,
                    originalRegistrationId,
                    streamId,
                    sessionId,
                    publicationLimitCounterId,
                    channelStatusIndicatorId,
                    logFilename,
                )
            }
            #[inline]
            pub unsafe fn onNewExclusivePublication(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                originalRegistrationId: ::std::os::raw::c_long,
                streamId: ::std::os::raw::c_int,
                sessionId: ::std::os::raw::c_int,
                publicationLimitCounterId: ::std::os::raw::c_int,
                channelStatusIndicatorId: ::std::os::raw::c_int,
                logFilename: *const root::std::string,
            ) {
                ClientConductor_onNewExclusivePublication(
                    self,
                    registrationId,
                    originalRegistrationId,
                    streamId,
                    sessionId,
                    publicationLimitCounterId,
                    channelStatusIndicatorId,
                    logFilename,
                )
            }
            #[inline]
            pub unsafe fn onSubscriptionReady(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                channelStatusId: ::std::os::raw::c_int,
            ) {
                ClientConductor_onSubscriptionReady(self, registrationId, channelStatusId)
            }
            #[inline]
            pub unsafe fn onOperationSuccess(&mut self, correlationId: ::std::os::raw::c_long) {
                ClientConductor_onOperationSuccess(self, correlationId)
            }
            #[inline]
            pub unsafe fn onChannelEndpointErrorResponse(
                &mut self,
                channelStatusId: ::std::os::raw::c_int,
                errorMessage: *const root::std::string,
            ) {
                ClientConductor_onChannelEndpointErrorResponse(self, channelStatusId, errorMessage)
            }
            #[inline]
            pub unsafe fn onErrorResponse(
                &mut self,
                offendingCommandCorrelationId: ::std::os::raw::c_long,
                errorCode: ::std::os::raw::c_int,
                errorMessage: *const root::std::string,
            ) {
                ClientConductor_onErrorResponse(
                    self,
                    offendingCommandCorrelationId,
                    errorCode,
                    errorMessage,
                )
            }
            #[inline]
            pub unsafe fn onAvailableImage(
                &mut self,
                correlationId: ::std::os::raw::c_long,
                sessionId: ::std::os::raw::c_int,
                subscriberPositionId: ::std::os::raw::c_int,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                logFilename: *const root::std::string,
                sourceIdentity: *const root::std::string,
            ) {
                ClientConductor_onAvailableImage(
                    self,
                    correlationId,
                    sessionId,
                    subscriberPositionId,
                    subscriptionRegistrationId,
                    logFilename,
                    sourceIdentity,
                )
            }
            #[inline]
            pub unsafe fn onUnavailableImage(
                &mut self,
                correlationId: ::std::os::raw::c_long,
                subscriptionRegistrationId: ::std::os::raw::c_long,
            ) {
                ClientConductor_onUnavailableImage(self, correlationId, subscriptionRegistrationId)
            }
            #[inline]
            pub unsafe fn onAvailableCounter(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            ) {
                ClientConductor_onAvailableCounter(self, registrationId, counterId)
            }
            #[inline]
            pub unsafe fn onUnavailableCounter(
                &mut self,
                registrationId: ::std::os::raw::c_long,
                counterId: ::std::os::raw::c_int,
            ) {
                ClientConductor_onUnavailableCounter(self, registrationId, counterId)
            }
            #[inline]
            pub unsafe fn onClientTimeout(&mut self, clientId: ::std::os::raw::c_long) {
                ClientConductor_onClientTimeout(self, clientId)
            }
            #[inline]
            pub unsafe fn closeAllResources(&mut self, nowMs: ::std::os::raw::c_longlong) {
                ClientConductor_closeAllResources(self, nowMs)
            }
            #[inline]
            pub unsafe fn addDestination(
                &mut self,
                publicationRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addDestination(self, publicationRegistrationId, endpointChannel)
            }
            #[inline]
            pub unsafe fn removeDestination(
                &mut self,
                publicationRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ClientConductor_removeDestination(self, publicationRegistrationId, endpointChannel)
            }
            #[inline]
            pub unsafe fn addRcvDestination(
                &mut self,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addRcvDestination(self, subscriptionRegistrationId, endpointChannel)
            }
            #[inline]
            pub unsafe fn removeRcvDestination(
                &mut self,
                subscriptionRegistrationId: ::std::os::raw::c_long,
                endpointChannel: *const root::std::string,
            ) -> ::std::os::raw::c_long {
                ClientConductor_removeRcvDestination(
                    self,
                    subscriptionRegistrationId,
                    endpointChannel,
                )
            }
            #[inline]
            pub unsafe fn addAvailableCounterHandler(
                &mut self,
                handler: *const root::aeron::on_available_counter_t,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addAvailableCounterHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeAvailableCounterHandler(
                &mut self,
                handler: *const root::aeron::on_available_counter_t,
            ) {
                ClientConductor_removeAvailableCounterHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeAvailableCounterHandler1(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) {
                ClientConductor_removeAvailableCounterHandler1(self, registrationId)
            }
            #[inline]
            pub unsafe fn addUnavailableCounterHandler(
                &mut self,
                handler: *const root::aeron::on_unavailable_counter_t,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addUnavailableCounterHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeUnavailableCounterHandler(
                &mut self,
                handler: *const root::aeron::on_unavailable_counter_t,
            ) {
                ClientConductor_removeUnavailableCounterHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeUnavailableCounterHandler1(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) {
                ClientConductor_removeUnavailableCounterHandler1(self, registrationId)
            }
            #[inline]
            pub unsafe fn addCloseClientHandler(
                &mut self,
                handler: *const root::aeron::on_close_client_t,
            ) -> ::std::os::raw::c_long {
                ClientConductor_addCloseClientHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeCloseClientHandler(
                &mut self,
                handler: *const root::aeron::on_close_client_t,
            ) {
                ClientConductor_removeCloseClientHandler(self, handler)
            }
            #[inline]
            pub unsafe fn removeCloseClientHandler1(
                &mut self,
                registrationId: ::std::os::raw::c_long,
            ) {
                ClientConductor_removeCloseClientHandler1(self, registrationId)
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ClientConductor_ClientConductor_destructor(self)
            }
        }
        #[repr(C)]
        #[repr(align(16))]
        pub struct Aeron {
            pub m_context: root::aeron::Context,
            pub m_cncBuffer: root::aeron::util::MemoryMappedFile_ptr_t,
            pub m_toDriverAtomicBuffer: root::aeron::concurrent::AtomicBuffer,
            pub m_toClientsAtomicBuffer: root::aeron::concurrent::AtomicBuffer,
            pub m_countersMetadataBuffer: root::aeron::concurrent::AtomicBuffer,
            pub m_countersValueBuffer: root::aeron::concurrent::AtomicBuffer,
            pub m_toDriverRingBuffer: root::aeron::concurrent::ringbuffer::ManyToOneRingBuffer,
            pub m_driverProxy: root::aeron::DriverProxy,
            pub m_toClientsBroadcastReceiver: root::aeron::concurrent::broadcast::BroadcastReceiver,
            pub __bindgen_padding_0: u64,
            pub m_toClientsCopyReceiver: root::aeron::concurrent::broadcast::CopyBroadcastReceiver,
            pub m_conductor: root::aeron::ClientConductor,
            pub m_idleStrategy: root::aeron::concurrent::SleepingIdleStrategy,
            pub m_conductorRunner: root::aeron::concurrent::AgentRunner<
                root::aeron::ClientConductor,
                root::aeron::concurrent::SleepingIdleStrategy,
            >,
            pub m_conductorInvoker:
                root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>,
        }
        #[test]
        fn bindgen_test_layout_Aeron() {
            const UNINIT: ::std::mem::MaybeUninit<Aeron> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Aeron>(),
                5616usize,
                concat!("Size of: ", stringify!(Aeron))
            );
            assert_eq!(
                ::std::mem::align_of::<Aeron>(),
                16usize,
                concat!("Alignment of ", stringify!(Aeron))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_context) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_context)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_cncBuffer) as usize - ptr as usize },
                344usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_cncBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toDriverAtomicBuffer) as usize - ptr as usize
                },
                360usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_toDriverAtomicBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toClientsAtomicBuffer) as usize - ptr as usize
                },
                376usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_toClientsAtomicBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_countersMetadataBuffer) as usize - ptr as usize
                },
                392usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_countersMetadataBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_countersValueBuffer) as usize - ptr as usize
                },
                408usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_countersValueBuffer)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toDriverRingBuffer) as usize - ptr as usize
                },
                424usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_toDriverRingBuffer)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_driverProxy) as usize - ptr as usize },
                464usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_driverProxy)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toClientsBroadcastReceiver) as usize
                        - ptr as usize
                },
                480usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_toClientsBroadcastReceiver)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).m_toClientsCopyReceiver) as usize - ptr as usize
                },
                544usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_toClientsCopyReceiver)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductor) as usize - ptr as usize },
                4672usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_conductor)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_idleStrategy) as usize - ptr as usize },
                5504usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_idleStrategy)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductorRunner) as usize - ptr as usize },
                5512usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_conductorRunner)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).m_conductorInvoker) as usize - ptr as usize },
                5584usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Aeron),
                    "::",
                    stringify!(m_conductorInvoker)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron5Aeron7versionB5cxx11Ev"]
            pub fn Aeron_version() -> root::std::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron5AeronC1ERNS_7ContextE"]
            pub fn Aeron_Aeron(this: *mut root::aeron::Aeron, context: *mut root::aeron::Context);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN5aeron5AeronD1Ev"]
            pub fn Aeron_Aeron_destructor(this: *mut root::aeron::Aeron);
        }
        impl Aeron {
            #[inline]
            pub unsafe fn version() -> root::std::string {
                Aeron_version()
            }
            #[inline]
            pub unsafe fn new(context: *mut root::aeron::Context) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Aeron_Aeron(__bindgen_tmp.as_mut_ptr(), context);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Aeron_Aeron_destructor(self)
            }
        }
    }
    
    #[test]
    fn __bindgen_test_layout_ReadablePosition_open0_UnsafeBufferPosition_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::status::ReadablePosition<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::ReadablePosition<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::status::ReadablePosition<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::ReadablePosition<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ReadablePosition_open0_UnsafeBufferPosition_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::status::ReadablePosition<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::ReadablePosition<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::status::ReadablePosition<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::ReadablePosition<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Position_open0_UnsafeBufferPosition_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::status::Position<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::Position<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::status::Position<
                    root::aeron::concurrent::status::UnsafeBufferPosition,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::concurrent::status::Position<
                        root::aeron::concurrent::status::UnsafeBufferPosition,
                    >
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_AtomicArrayUpdater_open0_shared_ptr_open1_Image_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<[u64; 4usize]>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!([u64; 4usize])
            )
        );
        assert_eq!(
            ::std::mem::align_of::<[u64; 4usize]>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!([u64; 4usize])
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_CorrelatedMessageDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::CorrelatedMessageDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::CorrelatedMessageDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::CorrelatedMessageDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::CorrelatedMessageDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_PublicationBuffersReadyDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::PublicationBuffersReadyDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<
                        root::aeron::command::PublicationBuffersReadyDefn,
                    >
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::PublicationBuffersReadyDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<
                        root::aeron::command::PublicationBuffersReadyDefn,
                    >
                )
            )
        );
    }
    
    
    
    
    
    
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_ImageBuffersReadyDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::ImageBuffersReadyDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ImageBuffersReadyDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::ImageBuffersReadyDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ImageBuffersReadyDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_ImageMessageDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::ImageMessageDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::aeron::command::Flyweight<root::aeron::command::ImageMessageDefn>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::ImageMessageDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::aeron::command::Flyweight<root::aeron::command::ImageMessageDefn>)
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_ErrorResponseDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::ErrorResponseDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ErrorResponseDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::ErrorResponseDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ErrorResponseDefn>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_OperationSucceededDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::OperationSucceededDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::OperationSucceededDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::OperationSucceededDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::OperationSucceededDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_SubscriptionReadyDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::SubscriptionReadyDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::SubscriptionReadyDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::SubscriptionReadyDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::SubscriptionReadyDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_CounterUpdateDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::CounterUpdateDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::CounterUpdateDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::CounterUpdateDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::CounterUpdateDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_Flyweight_open0_ClientTimeoutDefn_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::command::Flyweight<root::aeron::command::ClientTimeoutDefn>,
            >(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ClientTimeoutDefn>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::command::Flyweight<root::aeron::command::ClientTimeoutDefn>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::aeron::command::Flyweight<root::aeron::command::ClientTimeoutDefn>
                )
            )
        );
    }
    
    #[test]
    fn __bindgen_test_layout_DriverListenerAdapter_open0_ClientConductor_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::aeron::DriverListenerAdapter<root::aeron::ClientConductor>>(
            ),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::aeron::DriverListenerAdapter<root::aeron::ClientConductor>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::aeron::DriverListenerAdapter<root::aeron::ClientConductor>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::aeron::DriverListenerAdapter<root::aeron::ClientConductor>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_AgentInvoker_open0_ClientConductor_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>,
            >(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_AgentRunner_open0_ClientConductor_SleepingIdleStrategy_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::AgentRunner<
                    root::aeron::ClientConductor,
                    root::aeron::concurrent::SleepingIdleStrategy,
                >,
            >(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify ! (root :: aeron :: concurrent :: AgentRunner < root :: aeron :: ClientConductor , root :: aeron :: concurrent :: SleepingIdleStrategy >)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::AgentRunner<
                    root::aeron::ClientConductor,
                    root::aeron::concurrent::SleepingIdleStrategy,
                >,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify ! (root :: aeron :: concurrent :: AgentRunner < root :: aeron :: ClientConductor , root :: aeron :: concurrent :: SleepingIdleStrategy >)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_AgentInvoker_open0_ClientConductor_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<
                root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>,
            >(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::aeron::concurrent::AgentInvoker<root::aeron::ClientConductor>)
            )
        );
    }
}
